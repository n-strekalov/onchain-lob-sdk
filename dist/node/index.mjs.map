{
  "version": 3,
  "sources": ["../../src/common/eventEmitter.ts", "../../src/common/webSocketClient/index.node.ts", "../../src/utils/guards.ts", "../../src/utils/textUtils.ts", "../../src/utils/tokenUtils.ts", "../../src/utils/delay.ts", "../../src/common/timeoutScheduler.ts", "../../src/common/onchainLobWebSocketClient/onchainLobWebSocketClient.ts", "../../src/common/error.ts", "../../src/spot/onchainLobSpotMarketContract.ts", "../../src/spot/errors.ts", "../../src/abi/erc20.ts", "../../src/abi/lob.ts", "../../src/abi/erc20permit.ts", "../../src/abi/erc20Weth.ts", "../../src/spot/mappers.ts", "../../src/logging/logMessages.ts", "../../src/services/remoteService.ts", "../../src/services/constants.ts", "../../src/services/onchainLobSpotService/onchainLobSpotService.ts", "../../src/services/onchainLobSpotWebSocketService/onchainLobSpotWebSocketService.ts", "../../src/spot/limitDetails.ts", "../../src/spot/marketDetails.ts", "../../src/spot/onchainLobSpot.ts", "../../src/vault/mock.ts", "../../src/vault/onchainLobVault.ts", "../../src/onchainLobClient.ts"],
  "sourcesContent": ["/**\n * PublicEventEmitter is an interface that defines the contract for an event emitter.\n * It allows adding, removing, and removing all event listeners.\n *\n * @template T - A tuple type representing the arguments for the event listeners.\n */\nexport interface PublicEventEmitter<T extends readonly unknown[]> {\n  /**\n   * Adds a listener to the event emitter.\n   *\n   * @param listener - The function to be called when the event is emitted.\n   * @returns The instance of the event emitter.\n   */\n  addListener(listener: (...args: T) => void): this;\n\n  /**\n   * Removes a specific listener from the event emitter.\n   *\n   * @param listener - The function to be removed.\n   * @returns The instance of the event emitter.\n   */\n  removeListener(listener: (...args: T) => void): this;\n\n  /**\n   * Removes all listeners from the event emitter.\n   *\n   * @returns The instance of the event emitter.\n   */\n  removeAllListeners(): this;\n}\n\nexport class EventEmitter<T extends readonly unknown[]> implements PublicEventEmitter<T> {\n  private listeners: Set<(...args: T) => void> = new Set();\n\n  addListener(listener: (...args: T) => void) {\n    this.listeners.add(listener);\n    return this;\n  }\n\n  removeListener(listener: (...args: T) => void) {\n    if (this.listeners.has(listener))\n      this.listeners.delete(listener);\n    return this;\n  }\n\n  removeAllListeners() {\n    this.listeners = new Set();\n    return this;\n  }\n\n  emit(...args: T) {\n    if (!this.listeners.size)\n      return;\n\n    if (this.listeners.size === 1) {\n      try {\n        this.listeners.values().next().value(...args);\n      }\n      catch (error) {\n        console.error(error);\n      }\n    }\n    else {\n      // We copy listeners to prevent an unbounded loop if there is the adding of a new event handler inside the handler;\n      [...this.listeners].forEach(listener => {\n        try {\n          listener(...args);\n        }\n        catch (error) {\n          console.error(error);\n        }\n      });\n    }\n  }\n}\n\nexport type ToEventEmitter<T> = T extends PublicEventEmitter<infer TArgs> ? EventEmitter<TArgs> : never;\nexport type ToEventEmitters<T> = T extends Record<infer K, PublicEventEmitter<infer TArgs>> ? Record<K, EventEmitter<TArgs>> : never;\n", "import { WebSocket, type Event, type MessageEvent, type ErrorEvent, type CloseEvent } from 'ws';\n\nimport type { WebSocketClient as WebSocketClientInterface } from './shared';\nimport { EventEmitter, type ToEventEmitter } from '../eventEmitter';\n\nexport type WebSocketOpenEvent = Event;\nexport type WebSocketCloseEvent = CloseEvent;\n\nexport class WebSocketClient implements WebSocketClientInterface<WebSocketClient, WebSocketOpenEvent, WebSocketCloseEvent> {\n  readonly events: WebSocketClientInterface<WebSocketClient, WebSocketOpenEvent, WebSocketCloseEvent>['events'] = {\n    messageReceived: new EventEmitter(),\n    opened: new EventEmitter(),\n    closed: new EventEmitter(),\n  };\n\n  get readyState() {\n    return this.socket.readyState;\n  }\n\n  protected _socket: WebSocket | undefined;\n\n  protected get socket(): WebSocket {\n    if (!this._socket)\n      throw new Error('Internal websocket is not created. Use the connect method first');\n\n    return this._socket;\n  }\n\n  constructor(protected readonly url: string | URL) {\n  }\n\n  async connect(): Promise<void> {\n    this.disconnect();\n\n    return new Promise((resolve, reject) => {\n      this._socket = new WebSocket(this.url);\n\n      this.socket.once('open', () => resolve());\n      this.socket.once('error', error => reject(error));\n\n      this.socket.addEventListener('open', this.onOpened);\n      this.socket.addEventListener('message', this.onMessageReceived);\n      this.socket.addEventListener('error', this.onError);\n      this.socket.addEventListener('close', this.onClosed);\n    });\n  }\n\n  disconnect() {\n    if (!this._socket)\n      return;\n\n    this.socket.off('open', this.onOpened);\n    this.socket.off('message', this.onMessageReceived);\n    this.socket.off('error', this.onError);\n    this.socket.off('close', this.onClosed);\n    this.socket.close();\n  }\n\n  send<T>(message: T) {\n    this.socket.send(JSON.stringify(message));\n  }\n\n  protected onMessageReceived = (event: MessageEvent) => {\n    try {\n      const data = JSON.parse(event.data as string);\n\n      (this.events.messageReceived as ToEventEmitter<typeof this.events.messageReceived>).emit(data);\n    }\n    catch (error) {\n      console.error(error);\n    }\n  };\n\n  protected onError = (event: ErrorEvent) => {\n    throw new Error(`Websocket received error: ${event.message}`);\n  };\n\n  protected onOpened = (event: WebSocketOpenEvent) => {\n    (this.events.opened as ToEventEmitter<typeof this.events.opened>).emit(this, event);\n  };\n\n  protected onClosed = (event: WebSocketCloseEvent) => {\n    (this.events.closed as ToEventEmitter<typeof this.events.closed>).emit(this, event);\n  };\n}\n", "// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const isArray = (arg: any): arg is any[] => {\n  return Array.isArray(arg);\n};\n\nexport const isReadonlyArray = (arg: unknown): arg is readonly unknown[] => {\n  return Array.isArray(arg);\n};\n", "export const trimSlashes = (value: string): string => {\n  const hasFirst = value.startsWith('/');\n  const hasLast = value.endsWith('/');\n\n  return hasFirst && hasLast\n    ? value.slice(1, -1)\n    : hasFirst\n      ? value.slice(1)\n      : hasLast\n        ? value.slice(0, -1)\n        : value;\n};\n", "import BigNumber from 'bignumber.js';\nimport { formatUnits, parseUnits } from 'ethers';\n\nexport const convertTokensRawAmountToAmount = (amount: string | bigint, decimals: number): BigNumber => {\n  return new BigNumber(formatUnits(amount, decimals));\n};\n\nexport const convertTokensAmountToRawAmount = (amount: BigNumber, decimals: number): bigint => {\n  const preparedAmount = amount.toFixed(decimals, BigNumber.ROUND_DOWN);\n\n  return parseUnits(preparedAmount, decimals);\n};\n", "export const wait = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n", "/**\n * TimeoutScheduler is a utility class that manages the scheduling of actions with specified timeouts.\n * It allows you to set timeouts for actions and automatically handles the expiration of these timeouts.\n *\n * @param {number[]} timeouts - An array of timeout durations in milliseconds.\n * @param {number} [counterExpirationMs] - Optional duration in milliseconds after which the counter resets.\n *\n * Usage:\n *\n * const scheduler = new TimeoutScheduler([1000, 2000, 3000], 5000);\n *\n * scheduler.setTimeout(async () => {\n *   console.log('Action executed after timeout');\n * });\n *\n * // Reset the counter manually if needed\n * scheduler.resetCounter();\n *\n * // Dispose of the scheduler and clear all timeouts\n * scheduler[Symbol.dispose]();\n */\nexport class TimeoutScheduler implements Disposable {\n  private counterExpirationWatcherId: ReturnType<typeof setTimeout> | undefined;\n  private actionWatchers = new Set<ReturnType<typeof setTimeout>>();\n  private _counter = 0;\n\n  constructor(\n    private readonly timeouts: number[],\n    private readonly counterExpirationMs?: number\n  ) {\n  }\n\n  get counter() {\n    return this._counter;\n  }\n\n  private set counter(value: number) {\n    this._counter = value;\n  }\n\n  [Symbol.dispose]() {\n    if (this.counterExpirationWatcherId)\n      clearTimeout(this.counterExpirationWatcherId);\n\n    this.actionWatchers.forEach(watcher => clearTimeout(watcher));\n  }\n\n  setTimeout(action: () => void | Promise<void>): Promise<void> {\n    return new Promise(resolve => {\n      if (this.counterExpirationMs)\n        this.resetCounterExpiration();\n\n      const timeoutIndex = Math.min(this.counter, this.timeouts.length - 1);\n      const timeout = this.timeouts[timeoutIndex];\n\n      const watcherId = setTimeout(async () => {\n        this.actionWatchers.delete(watcherId);\n        clearTimeout(watcherId);\n        await action();\n        resolve();\n      }, timeout);\n      this.actionWatchers.add(watcherId);\n\n      this.counter++;\n    });\n  }\n\n  resetCounter() {\n    this.counter = 0;\n  }\n\n  private resetCounterExpiration() {\n    if (this.counterExpirationWatcherId)\n      clearTimeout(this.counterExpirationWatcherId);\n\n    this.counterExpirationWatcherId = setTimeout(() => {\n      this.resetCounter();\n      this.counterExpirationWatcherId = undefined;\n    }, this.counterExpirationMs);\n  }\n}\n", "import type {\n  SubscribeToSubscriptionWebSocketRequestDto, UnsubscribeFromSubscriptionWebSocketRequestDto,\n  OnchainLobWebSocketResponseDto\n} from './dtos';\nimport type { Subscription } from './subscription';\nimport { textUtils } from '../../utils';\nimport { EventEmitter, type PublicEventEmitter, type ToEventEmitter } from '../eventEmitter';\nimport { TimeoutScheduler } from '../timeoutScheduler';\nimport { ReadyState, WebSocketClient, type WebSocketCloseEvent } from '../webSocketClient';\n\ninterface OnchainLobWebSocketClientEvents {\n  messageReceived: PublicEventEmitter<readonly [message: OnchainLobWebSocketResponseDto]>;\n}\n\nexport type SubscriptionData = boolean | string | number | Record<string, unknown>;\n\nexport class OnchainLobWebSocketClient implements Disposable {\n  readonly baseUrl: string;\n  readonly events: OnchainLobWebSocketClientEvents = {\n    messageReceived: new EventEmitter(),\n  };\n\n  protected socket: WebSocketClient;\n  protected subscriptions: Map<string, Subscription> = new Map();\n  protected subscriptionIdCounter: number = 0;\n  protected reconnectScheduler = new TimeoutScheduler([1000, 5000, 30000, 60000], 120000);\n\n  private _isStarted = false;\n  private _isStarting = false;\n\n  constructor(baseUrl: string) {\n    this.baseUrl = textUtils.trimSlashes(baseUrl);\n    this.socket = new WebSocketClient(new URL(this.baseUrl));\n  }\n\n  get isStarted() {\n    return this._isStarted;\n  }\n\n  protected get isSocketOpen() {\n    return this.socket.readyState === ReadyState.Open;\n  }\n\n  async start(): Promise<void> {\n    if (this.isStarted || this._isStarting)\n      return;\n\n    this._isStarting = true;\n\n    try {\n      this.socket.events.messageReceived.addListener(this.onSocketMessageReceived);\n      this.socket.events.closed.addListener(this.onSocketClosed);\n      await this.connect();\n      this._isStarted = true;\n    }\n    catch (error: unknown) {\n      this._isStarting = false;\n      this._isStarted = false;\n      throw new Error('Socket error', { cause: error });\n    }\n  }\n\n  stop() {\n    if (!(this.isStarted || this._isStarting))\n      return;\n\n    this.socket.events.messageReceived.removeListener(this.onSocketMessageReceived);\n    this.socket.events.closed.removeListener(this.onSocketClosed);\n    this.disconnect();\n    this.reconnectScheduler[Symbol.dispose]();\n\n    this._isStarted = false;\n    this._isStarting = false;\n  }\n\n  subscribe(subscriptionData: SubscriptionData): number {\n    const serializedSubscriptionData = this.serializeSubscriptionData(subscriptionData);\n\n    let subscription = this.subscriptions.get(serializedSubscriptionData);\n    if (subscription) {\n      subscription.subscribersCount++;\n\n      return subscription.id;\n    }\n\n    subscription = {\n      id: this.subscriptionIdCounter++,\n      data: subscriptionData,\n      serializedData: serializedSubscriptionData,\n      subscribersCount: 1,\n    };\n\n    this.subscribeToSubscription(subscription);\n    this.subscriptions.set(subscription.serializedData, subscription);\n\n    return subscription.id;\n  }\n\n  unsubscribe(subscriptionData: SubscriptionData): boolean {\n    const serializedSubscriptionData = this.serializeSubscriptionData(subscriptionData);\n\n    const subscription = this.subscriptions.get(serializedSubscriptionData);\n    if (!subscription)\n      return false;\n\n    if (--subscription.subscribersCount > 0)\n      return false;\n\n    this.unsubscribeFromSubscription(subscription);\n    this.subscriptions.delete(subscription.serializedData);\n\n    return true;\n  }\n\n  unsubscribeFromAllSubscriptions(): boolean {\n    if (!this.subscriptions.size)\n      return false;\n\n    for (const subscription of this.subscriptions.values()) {\n      this.unsubscribeFromSubscription(subscription);\n    }\n    this.subscriptions.clear();\n\n    return true;\n  }\n\n  [Symbol.dispose](): void {\n    this.stop();\n  }\n\n  protected async connect(): Promise<void> {\n    await this.socket.connect();\n\n    this.subscribeToAllSubscriptions();\n  }\n\n  protected subscribeToAllSubscriptions() {\n    if (!this.isSocketOpen)\n      return;\n\n    for (const subscription of this.subscriptions.values())\n      this.subscribeToSubscription(subscription);\n  }\n\n  protected subscribeToSubscription(subscription: Subscription) {\n    if (!this.isSocketOpen)\n      return;\n\n    const message: SubscribeToSubscriptionWebSocketRequestDto = {\n      method: 'subscribe',\n      subscription: subscription.data,\n    };\n    this.socket.send(message);\n  }\n\n  protected unsubscribeFromSubscription(subscription: Subscription) {\n    if (!this.isSocketOpen)\n      return;\n\n    const message: UnsubscribeFromSubscriptionWebSocketRequestDto = {\n      method: 'unsubscribe',\n      subscription: subscription.data,\n    };\n    this.socket.send(message);\n  }\n\n  protected disconnect(): void {\n    this.socket.disconnect();\n    this.subscriptions.clear();\n  }\n\n  protected onSocketClosed = (_socket: WebSocketClient, event: WebSocketCloseEvent) => {\n    console.warn('Onchain LOB websocket is closed. Reason:', event.reason);\n    this.reconnectScheduler\n      .setTimeout(() => {\n        console.log('Onchain LOB websocket reconnection...');\n        this.connect()\n          .catch(error => console.error('Reconnection error:', error));\n      })\n      .catch(error => console.error('Reconnect Scheduler error:', error));\n  };\n\n  protected onSocketMessageReceived = (message: unknown) => {\n    switch ((message as OnchainLobWebSocketResponseDto).channel) {\n      case 'connection':\n        break;\n\n      default:\n        (this.events.messageReceived as ToEventEmitter<typeof this.events.messageReceived>).emit(message as OnchainLobWebSocketResponseDto);\n    }\n  };\n\n  protected serializeSubscriptionData(data: SubscriptionData) {\n    return JSON.stringify(data, Object.keys(data));\n  }\n}\n", "/**\n * A base class for all errors thrown by the Onchain LOB TypeScript SDK.\n *\n * @class OnchainLobError\n * @extends Error\n */\nexport abstract class OnchainLobError extends Error {\n  readonly name: string;\n\n  /**\n   * Creates a new OnchainLobError.\n   *\n   * @param {string} [message] - The error message.\n   * @param {ErrorOptions} [options] - The error options.\n   */\n  constructor(message?: string, options?: ErrorOptions) {\n    super(message, options);\n\n    this.name = this.constructor.name;\n  }\n}\n", "import BigNumber from 'bignumber.js';\nimport { Contract, type Signer, ContractTransactionResponse, Signature } from 'ethers';\n\nimport { TransactionFailedError } from './errors';\nimport type {\n  ApproveSpotParams,\n  BatchChangeOrderSpotParams,\n  BatchClaimOrderSpotParams,\n  BatchPlaceOrderSpotParams,\n  ChangeOrderSpotParams,\n  ClaimOrderSpotParams,\n  DepositSpotParams,\n  PlaceMarketOrderWithTargetValueParams,\n  PlaceMarketOrderWithTargetValueWithPermitParams,\n  PlaceOrderSpotParams,\n  PlaceOrderWithPermitSpotParams,\n  SetClaimableStatusParams,\n  UnwrapNativeTokenSpotParams,\n  WithdrawSpotParams,\n  WrapNativeTokenSpotParams\n} from './params';\nimport { erc20Abi, lobAbi, erc20PermitAbi, erc20WethAbi } from '../abi';\nimport type { Market, Token } from '../models';\nimport { tokenUtils } from '../utils';\nimport { wait } from '../utils/delay';\n\nexport interface OnchainLobSpotMarketContractOptions {\n  market: Market;\n  signer: Signer;\n  transferExecutedTokensEnabled?: boolean;\n  autoWaitTransaction?: boolean;\n  fastWaitTransaction?: boolean;\n  fastWaitTransactionInterval?: number;\n  fastWaitTransactionTimeout?: number;\n}\n\nconst DEFAULT_MAX_COMMISSION = 340282366920938463463374607431768211455n; // 2^128 - 1\nconst DEFAULT_ASK_MARKET_PRICE = 1n;\nconst DEFAULT_BID_MARKET_PRICE = 999999000000000000000n;\nconst getExpires = () => BigInt(Math.floor(Date.now() / 1000) + 5 * 60);\n\ntype ReadonlyMarket = Readonly<Omit<Market, 'baseToken' | 'quoteToken'>>\n  & Readonly<{ baseToken: Readonly<Token>; quoteToken: Readonly<Token> }>;\n\nexport class OnchainLobSpotMarketContract {\n  static readonly defaultTransferExecutedTokensEnabled = true;\n  static readonly defaultAutoWaitTransaction = true;\n  static readonly defaultFastWaitTransaction = false;\n  static readonly defaultFastWaitTransactionInterval = 100;\n\n  readonly market: ReadonlyMarket;\n  transferExecutedTokensEnabled: boolean;\n  autoWaitTransaction: boolean;\n  fastWaitTransaction: boolean;\n  fastWaitTransactionInterval: number;\n  fastWaitTransactionTimeout?: number;\n\n  protected readonly signer: Signer;\n  protected readonly marketContract: Contract;\n  protected readonly baseTokenContract: Contract;\n  protected readonly quoteTokenContract: Contract;\n  private _chainId: bigint | undefined;\n  protected get chainId(): Promise<bigint> {\n    if (this._chainId === undefined) {\n      return this.signer.provider!.getNetwork().then(network => {\n        this._chainId = network.chainId;\n        return this._chainId;\n      });\n    }\n    return Promise.resolve(this._chainId);\n  }\n\n  constructor(options: Readonly<OnchainLobSpotMarketContractOptions>) {\n    this.market = options.market;\n    this.signer = options.signer;\n    this.transferExecutedTokensEnabled = options.transferExecutedTokensEnabled ?? OnchainLobSpotMarketContract.defaultTransferExecutedTokensEnabled;\n    this.autoWaitTransaction = options.autoWaitTransaction ?? OnchainLobSpotMarketContract.defaultAutoWaitTransaction;\n    this.fastWaitTransaction = options.fastWaitTransaction ?? OnchainLobSpotMarketContract.defaultFastWaitTransaction;\n    this.fastWaitTransactionInterval = options.fastWaitTransactionInterval ?? OnchainLobSpotMarketContract.defaultFastWaitTransactionInterval;\n    this.fastWaitTransactionTimeout = options.fastWaitTransactionTimeout;\n\n    this.marketContract = new Contract(this.market.orderbookAddress, lobAbi, options.signer);\n    this.baseTokenContract = new Contract(\n      this.market.baseToken.contractAddress,\n      this.market.supportsNativeToken && this.market.isNativeTokenX ? erc20WethAbi : this.market.baseToken.supportsPermit ? erc20PermitAbi : erc20Abi,\n      options.signer\n    );\n    this.quoteTokenContract = new Contract(\n      this.market.quoteToken.contractAddress,\n      this.market.supportsNativeToken && !this.market.isNativeTokenX ? erc20WethAbi : this.market.quoteToken.supportsPermit ? erc20PermitAbi : erc20Abi,\n      options.signer\n    );\n  }\n\n  async approveTokens(params: ApproveSpotParams): Promise<ContractTransactionResponse> {\n    let token: Token;\n    let tokenContract: Contract;\n\n    if (params.isBaseToken) {\n      token = this.market.baseToken;\n      tokenContract = this.baseTokenContract;\n    }\n    else {\n      token = this.market.quoteToken;\n      tokenContract = this.quoteTokenContract;\n    }\n\n    const amount = this.convertTokensAmountToRawAmountIfNeeded(params.amount, token.decimals);\n    const tx = await this.processContractMethodCall(\n      tokenContract,\n      tokenContract.approve!(\n        params.market,\n        amount,\n        {\n          gasLimit: params.gasLimit,\n          nonce: params.nonce,\n          maxFeePerGas: params.maxFeePerGas,\n          maxPriorityFeePerGas: params.maxPriorityFeePerGas,\n        }\n      ));\n\n    return tx;\n  }\n\n  async depositTokens(params: DepositSpotParams): Promise<ContractTransactionResponse> {\n    const baseTokenAmount = this.convertTokensAmountToRawAmountIfNeeded(params.baseTokenAmount, this.market.tokenXScalingFactor);\n    const quoteTokenAmount = this.convertTokensAmountToRawAmountIfNeeded(params.quoteTokenAmount, this.market.tokenYScalingFactor);\n\n    const tx = await this.processContractMethodCall(\n      this.marketContract,\n      this.marketContract.depositTokens!(\n        baseTokenAmount,\n        quoteTokenAmount,\n        {\n          gasLimit: params.gasLimit,\n          nonce: params.nonce,\n          maxFeePerGas: params.maxFeePerGas,\n          maxPriorityFeePerGas: params.maxPriorityFeePerGas,\n        }\n      )\n    );\n\n    return tx;\n  }\n\n  async withdrawTokens(params: WithdrawSpotParams): Promise<ContractTransactionResponse> {\n    const withdrawAll = !!params.withdrawAll;\n    let baseTokenAmount: bigint;\n    let quoteTokenAmount: bigint;\n\n    if (withdrawAll) {\n      baseTokenAmount = 0n;\n      quoteTokenAmount = 0n;\n    }\n    else {\n      baseTokenAmount = this.convertTokensAmountToRawAmountIfNeeded(params.baseTokenAmount, this.market.tokenXScalingFactor);\n      quoteTokenAmount = this.convertTokensAmountToRawAmountIfNeeded(params.quoteTokenAmount, this.market.tokenYScalingFactor);\n    }\n\n    const tx = await this.processContractMethodCall(\n      this.marketContract,\n      this.marketContract.withdrawTokens!(\n        withdrawAll,\n        baseTokenAmount,\n        quoteTokenAmount,\n        {\n          gasLimit: params.gasLimit,\n          nonce: params.nonce,\n          maxFeePerGas: params.maxFeePerGas,\n          maxPriorityFeePerGas: params.maxPriorityFeePerGas,\n        }\n      )\n    );\n\n    return tx;\n  }\n\n  async setClaimableStatus(params: SetClaimableStatusParams): Promise<ContractTransactionResponse> {\n    const tx = await this.processContractMethodCall(\n      this.marketContract,\n      this.marketContract.setClaimableStatus!(\n        params.status,\n        {\n          gasLimit: params.gasLimit,\n          nonce: params.nonce,\n          maxFeePerGas: params.maxFeePerGas,\n          maxPriorityFeePerGas: params.maxPriorityFeePerGas,\n        }\n      )\n    );\n\n    return tx;\n  }\n\n  async placeOrder(params: PlaceOrderSpotParams): Promise<ContractTransactionResponse> {\n    if (params.nativeTokenToSend !== undefined && this.market.supportsNativeToken\n      && !((params.side === 'ask' && this.market.isNativeTokenX) || (params.side !== 'ask' && !this.market.isNativeTokenX))) {\n      throw Error('Token to send is not native.');\n    }\n\n    const sizeAmount = this.convertTokensAmountToRawAmountIfNeeded(params.size, this.market.tokenXScalingFactor);\n    let priceAmount;\n    if (params.type === 'market_execution') {\n      priceAmount = params.side === 'ask' ? DEFAULT_ASK_MARKET_PRICE : DEFAULT_BID_MARKET_PRICE;\n    }\n    else {\n      priceAmount = this.convertTokensAmountToRawAmountIfNeeded(params.price, this.market.priceScalingFactor);\n    }\n    const expires = getExpires();\n    const maxCommission = params.maxCommission === undefined ? DEFAULT_MAX_COMMISSION : this.convertTokensAmountToRawAmountIfNeeded(params.maxCommission, this.market.tokenYScalingFactor);\n    const value = params.nativeTokenToSend === undefined\n      ? 0n\n      : this.convertTokensAmountToRawAmountIfNeeded(params.nativeTokenToSend,\n        params.side === 'ask' ? this.market.baseToken.decimals : this.market.quoteToken.decimals);\n\n    const tx = await this.processContractMethodCall(\n      this.marketContract,\n      this.marketContract.placeOrder!(\n        params.side === 'ask',\n        sizeAmount,\n        priceAmount,\n        maxCommission,\n        params.type === 'ioc' || params.type === 'market_execution',\n        params.type === 'limit_post_only',\n        params.transferExecutedTokens ?? this.transferExecutedTokensEnabled,\n        expires,\n        {\n          value,\n          gasLimit: params.gasLimit,\n          nonce: params.nonce,\n          maxFeePerGas: params.maxFeePerGas,\n          maxPriorityFeePerGas: params.maxPriorityFeePerGas,\n        }\n      )\n    );\n\n    return tx;\n  }\n\n  async placeOrderWithPermit(params: PlaceOrderWithPermitSpotParams): Promise<ContractTransactionResponse> {\n    if ((params.side === 'ask' && !this.market.baseToken.supportsPermit)\n      || (params.side === 'bid' && !this.market.quoteToken.supportsPermit)) {\n      throw Error('Token doesn\\'t support permits');\n    }\n    const sizeAmount = this.convertTokensAmountToRawAmountIfNeeded(params.size, this.market.tokenXScalingFactor);\n    let priceAmount;\n    if (params.type === 'market_execution') {\n      priceAmount = params.side === 'ask' ? DEFAULT_ASK_MARKET_PRICE : DEFAULT_BID_MARKET_PRICE;\n    }\n    else {\n      priceAmount = this.convertTokensAmountToRawAmountIfNeeded(params.price, this.market.priceScalingFactor);\n    }\n    let quantityToPermit, amountToPermit: bigint;\n    if (params.side === 'ask') {\n      amountToPermit = this.convertTokensAmountToRawAmountIfNeeded(\n        params.permit,\n        this.market.tokenXScalingFactor\n      );\n      quantityToPermit = amountToPermit * 10n ** BigInt(\n        this.market.baseToken.decimals - this.market.tokenXScalingFactor);\n    }\n    else {\n      amountToPermit = this.convertTokensAmountToRawAmountIfNeeded(\n        params.permit,\n        this.market.tokenYScalingFactor\n      );\n      quantityToPermit = amountToPermit * 10n ** BigInt(\n        this.market.quoteToken.decimals - this.market.tokenYScalingFactor);\n    }\n\n    const expires = getExpires();\n    const maxCommission = params.maxCommission === undefined ? DEFAULT_MAX_COMMISSION : this.convertTokensAmountToRawAmountIfNeeded(params.maxCommission, this.market.tokenYScalingFactor);\n    const { v, r, s } = await this.signPermit(params.side === 'ask', quantityToPermit, expires);\n    const tx = await this.processContractMethodCall(\n      this.marketContract,\n      this.marketContract.placeOrder!(\n        params.side === 'ask',\n        sizeAmount,\n        priceAmount,\n        maxCommission,\n        amountToPermit,\n        params.type === 'ioc' || params.type === 'market_execution',\n        params.type === 'limit_post_only',\n        params.transferExecutedTokens ?? this.transferExecutedTokensEnabled,\n        expires,\n        v,\n        r,\n        s,\n        {\n          gasLimit: params.gasLimit,\n          nonce: params.nonce,\n          maxFeePerGas: params.maxFeePerGas,\n          maxPriorityFeePerGas: params.maxPriorityFeePerGas,\n        }\n      )\n    );\n\n    return tx;\n  }\n\n  async placeMarketOrderWithTargetValue(params: PlaceMarketOrderWithTargetValueParams): Promise<ContractTransactionResponse> {\n    if (params.nativeTokenToSend !== undefined && this.market.supportsNativeToken\n      && !((params.side === 'ask' && this.market.isNativeTokenX) || (params.side !== 'ask' && !this.market.isNativeTokenX))) {\n      throw Error('Token to send is not native.');\n    }\n\n    const targetTokenYValue = this.convertTokensAmountToRawAmountIfNeeded(params.size, this.market.tokenYScalingFactor);\n    let priceAmount;\n    if (params.type === 'market_execution') {\n      priceAmount = params.side === 'ask' ? DEFAULT_ASK_MARKET_PRICE : DEFAULT_BID_MARKET_PRICE;\n    }\n    else {\n      priceAmount = this.convertTokensAmountToRawAmountIfNeeded(params.price, this.market.priceScalingFactor);\n    }\n    const maxCommission = params.maxCommission === undefined ? DEFAULT_MAX_COMMISSION : this.convertTokensAmountToRawAmountIfNeeded(params.maxCommission, this.market.tokenYScalingFactor);\n    const expires = getExpires();\n    const value = params.nativeTokenToSend === undefined\n      ? 0n\n      : this.convertTokensAmountToRawAmountIfNeeded(params.nativeTokenToSend,\n        params.side === 'ask' ? this.market.baseToken.decimals : this.market.quoteToken.decimals);\n\n    const tx = await this.processContractMethodCall(\n      this.marketContract,\n      this.marketContract.placeMarketOrderWithTargetValue!(\n        params.side === 'ask',\n        targetTokenYValue,\n        priceAmount,\n        maxCommission,\n        params.transferExecutedTokens ?? this.transferExecutedTokensEnabled,\n        expires,\n        {\n          value,\n          gasLimit: params.gasLimit,\n          nonce: params.nonce,\n          maxFeePerGas: params.maxFeePerGas,\n          maxPriorityFeePerGas: params.maxPriorityFeePerGas,\n        }\n      )\n    );\n\n    return tx;\n  }\n\n  async placeMarketOrderWithTargetValueWithPermit(params: PlaceMarketOrderWithTargetValueWithPermitParams): Promise<ContractTransactionResponse> {\n    if ((params.side === 'ask' && !this.market.baseToken.supportsPermit)\n      || (params.side === 'bid' && !this.market.quoteToken.supportsPermit)) {\n      throw Error('Token doesn\\'t support permits');\n    }\n\n    const targetTokenYValue = this.convertTokensAmountToRawAmountIfNeeded(params.size, this.market.tokenYScalingFactor);\n    let priceAmount;\n    if (params.type === 'market_execution') {\n      priceAmount = params.side === 'ask' ? DEFAULT_ASK_MARKET_PRICE : DEFAULT_BID_MARKET_PRICE;\n    }\n    else {\n      priceAmount = this.convertTokensAmountToRawAmountIfNeeded(params.price, this.market.priceScalingFactor);\n    }\n    let quantityToPermit, amountToPermit: bigint;\n    if (params.side === 'ask') {\n      amountToPermit = this.convertTokensAmountToRawAmountIfNeeded(\n        params.permit,\n        this.market.tokenXScalingFactor\n      );\n      quantityToPermit = amountToPermit * 10n ** BigInt(\n        this.market.baseToken.decimals - this.market.tokenXScalingFactor);\n    }\n    else {\n      amountToPermit = this.convertTokensAmountToRawAmountIfNeeded(\n        params.permit,\n        this.market.tokenYScalingFactor\n      );\n      quantityToPermit = amountToPermit * 10n ** BigInt(\n        this.market.quoteToken.decimals - this.market.tokenYScalingFactor);\n    }\n    const maxCommission = params.maxCommission === undefined ? DEFAULT_MAX_COMMISSION : this.convertTokensAmountToRawAmountIfNeeded(params.maxCommission, this.market.tokenYScalingFactor);\n    const expires = getExpires();\n    const { v, r, s } = await this.signPermit(params.side === 'ask', quantityToPermit, expires);\n\n    const tx = await this.processContractMethodCall(\n      this.marketContract,\n      this.marketContract.placeMarketOrderWithTargetValue!(\n        params.side === 'ask',\n        targetTokenYValue,\n        priceAmount,\n        maxCommission,\n        amountToPermit,\n        params.transferExecutedTokens ?? this.transferExecutedTokensEnabled,\n        expires,\n        v,\n        r,\n        s,\n        {\n          gasLimit: params.gasLimit,\n          nonce: params.nonce,\n          maxFeePerGas: params.maxFeePerGas,\n          maxPriorityFeePerGas: params.maxPriorityFeePerGas,\n        }\n      )\n    );\n\n    return tx;\n  }\n\n  async batchPlaceOrder(params: BatchPlaceOrderSpotParams): Promise<ContractTransactionResponse> {\n    const idsAsDirections: bigint[] = [];\n    const sizeAmounts: bigint[] = [];\n    const priceAmounts: bigint[] = [];\n    const expires = getExpires();\n\n    for (const orderParams of params.orderParams) {\n      idsAsDirections.push(orderParams.side === 'ask' ? 1n : 0n);\n      sizeAmounts.push(this.convertTokensAmountToRawAmountIfNeeded(orderParams.size, this.market.tokenXScalingFactor));\n      priceAmounts.push(this.convertTokensAmountToRawAmountIfNeeded(orderParams.price, this.market.priceScalingFactor));\n    }\n    const maxCommissionPerOrder = this.calculateMaxCommissionPerOrder(sizeAmounts, priceAmounts);\n    const tx = await this.processContractMethodCall(\n      this.marketContract,\n      this.marketContract.batchChangeOrder!(\n        idsAsDirections,\n        sizeAmounts,\n        priceAmounts,\n        maxCommissionPerOrder,\n        params.type === 'limit_post_only',\n        params.transferExecutedTokens ?? this.transferExecutedTokensEnabled,\n        expires,\n        {\n          gasLimit: params.gasLimit,\n          nonce: params.nonce,\n          maxFeePerGas: params.maxFeePerGas,\n          maxPriorityFeePerGas: params.maxPriorityFeePerGas,\n        }\n      )\n    );\n\n    return tx;\n  }\n\n  async claimOrder(params: ClaimOrderSpotParams): Promise<ContractTransactionResponse> {\n    const expires = getExpires();\n    const tx = await this.processContractMethodCall(\n      this.marketContract,\n      this.marketContract.claimOrder!(\n        params.orderId,\n        params.onlyClaim,\n        params.transferExecutedTokens ?? this.transferExecutedTokensEnabled,\n        expires,\n        {\n          gasLimit: params.gasLimit,\n          nonce: params.nonce,\n          maxFeePerGas: params.maxFeePerGas,\n          maxPriorityFeePerGas: params.maxPriorityFeePerGas,\n        })\n    );\n\n    return tx;\n  }\n\n  async batchClaim(params: BatchClaimOrderSpotParams): Promise<ContractTransactionResponse> {\n    const addresses: string[] = [];\n    const orderIds: string[] = [];\n    const expires = getExpires();\n\n    for (const claimParams of params.claimParams) {\n      addresses.push(claimParams.address);\n      orderIds.push(claimParams.orderId);\n    }\n\n    const tx = await this.processContractMethodCall(\n      this.marketContract,\n      this.marketContract.batchClaim!(\n        addresses,\n        orderIds,\n        params.onlyClaim,\n        expires,\n        {\n          gasLimit: params.gasLimit,\n          nonce: params.nonce,\n          maxFeePerGas: params.maxFeePerGas,\n          maxPriorityFeePerGas: params.maxPriorityFeePerGas,\n        }\n      )\n    );\n\n    return tx;\n  }\n\n  async changeOrder(params: ChangeOrderSpotParams): Promise<ContractTransactionResponse> {\n    const sizeAmount = this.convertTokensAmountToRawAmountIfNeeded(params.newSize, this.market.tokenXScalingFactor);\n    const priceAmount = this.convertTokensAmountToRawAmountIfNeeded(params.newPrice, this.market.priceScalingFactor);\n    const maxCommission = this.convertTokensAmountToRawAmountIfNeeded(params.maxCommission, this.market.tokenYScalingFactor);\n    const expires = getExpires();\n\n    const tx = await this.processContractMethodCall(\n      this.marketContract,\n      this.marketContract.changeOrder!(\n        params.orderId,\n        sizeAmount,\n        priceAmount,\n        maxCommission,\n        params.type === 'limit_post_only',\n        params.transferExecutedTokens ?? this.transferExecutedTokensEnabled,\n        expires,\n        {\n          gasLimit: params.gasLimit,\n          nonce: params.nonce,\n          maxFeePerGas: params.maxFeePerGas,\n          maxPriorityFeePerGas: params.maxPriorityFeePerGas,\n        }\n      )\n    );\n\n    return tx;\n  }\n\n  async batchChangeOrder(params: BatchChangeOrderSpotParams): Promise<ContractTransactionResponse> {\n    const orderIds: string[] = [];\n    const newSizes: bigint[] = [];\n    const newPrices: bigint[] = [];\n    const expires = getExpires();\n\n    for (const orderParams of params.orderParams) {\n      orderIds.push(orderParams.orderId);\n      newSizes.push(this.convertTokensAmountToRawAmountIfNeeded(orderParams.newSize, this.market.tokenXScalingFactor));\n      newPrices.push(this.convertTokensAmountToRawAmountIfNeeded(orderParams.newPrice, this.market.priceScalingFactor));\n    }\n    const maxCommissionPerOrder = this.calculateMaxCommissionPerOrder(newSizes, newPrices);\n\n    const tx = await this.processContractMethodCall(\n      this.marketContract,\n      this.marketContract.batchChangeOrder!(\n        orderIds,\n        newSizes,\n        newPrices,\n        maxCommissionPerOrder,\n        params.type === 'limit_post_only',\n        params.transferExecutedTokens ?? this.transferExecutedTokensEnabled,\n        expires,\n        {\n          gasLimit: params.gasLimit,\n          nonce: params.nonce,\n          maxFeePerGas: params.maxFeePerGas,\n          maxPriorityFeePerGas: params.maxPriorityFeePerGas,\n        }\n      )\n    );\n\n    return tx;\n  }\n\n  async wrapNativeToken(params: WrapNativeTokenSpotParams): Promise<ContractTransactionResponse> {\n    let token: Token;\n    let tokenContract: Contract;\n\n    if (!this.market.supportsNativeToken) {\n      throw Error('Market doesn\\'t support native token');\n    }\n\n    if (this.market.isNativeTokenX) {\n      token = this.market.baseToken;\n      tokenContract = this.baseTokenContract;\n    }\n    else {\n      token = this.market.quoteToken;\n      tokenContract = this.quoteTokenContract;\n    }\n\n    const amount = this.convertTokensAmountToRawAmountIfNeeded(params.amount, token.decimals);\n    const tx = await this.processContractMethodCall(\n      tokenContract,\n      tokenContract.deposit!(\n        {\n          value: amount,\n          gasLimit: params.gasLimit,\n          nonce: params.nonce,\n          maxFeePerGas: params.maxFeePerGas,\n          maxPriorityFeePerGas: params.maxPriorityFeePerGas,\n        }\n      ));\n\n    return tx;\n  }\n\n  async unwrapNativeToken(params: UnwrapNativeTokenSpotParams): Promise<ContractTransactionResponse> {\n    let token: Token;\n    let tokenContract: Contract;\n\n    if (!this.market.supportsNativeToken) {\n      throw Error('Market doesn\\'t support native token');\n    }\n\n    if (this.market.isNativeTokenX) {\n      token = this.market.baseToken;\n      tokenContract = this.baseTokenContract;\n    }\n    else {\n      token = this.market.quoteToken;\n      tokenContract = this.quoteTokenContract;\n    }\n\n    const amount = this.convertTokensAmountToRawAmountIfNeeded(params.amount, token.decimals);\n    const tx = await this.processContractMethodCall(\n      tokenContract,\n      tokenContract.withdraw!(\n        amount,\n        {\n          gasLimit: params.gasLimit,\n          nonce: params.nonce,\n          maxFeePerGas: params.maxFeePerGas,\n          maxPriorityFeePerGas: params.maxPriorityFeePerGas,\n        }\n      ));\n\n    return tx;\n  }\n\n  protected async processContractMethodCall(contract: Contract, methodCall: Promise<ContractTransactionResponse>): Promise<ContractTransactionResponse> {\n    try {\n      const tx = await methodCall;\n\n      if (this.autoWaitTransaction) {\n        if (this.fastWaitTransaction) {\n          const startingTime = Date.now();\n          let receipt = await tx.provider.getTransactionReceipt(tx.hash);\n\n          while (receipt == null) {\n            if (this.fastWaitTransactionTimeout && Date.now() - startingTime >= this.fastWaitTransactionTimeout) {\n              break; // timeout reached\n            }\n\n            await wait(this.fastWaitTransactionInterval);\n            receipt = await tx.provider.getTransactionReceipt(tx.hash);\n          }\n        }\n        else {\n          await tx.wait();\n        }\n      }\n\n      return tx;\n    }\n    catch (error) {\n      if ((error as any).data) {\n        try {\n          const decodedError = contract.interface.parseError((error as any).data);\n          throw new TransactionFailedError((error as any).data, decodedError, { cause: error });\n        }\n        catch (parseError) {\n          // If error parsing fails, throw the original error\n          console.error('Failed to parse contract error:', parseError);\n          throw error;\n        }\n      }\n\n      throw error;\n    }\n  }\n\n  private convertTokensAmountToRawAmountIfNeeded(amount: BigNumber | bigint, decimals: number): bigint {\n    return typeof amount === 'bigint'\n      ? amount\n      : tokenUtils.convertTokensAmountToRawAmount(amount, decimals);\n  }\n\n  private calculateMaxCommission(sizeAmount: bigint, priceAmount: bigint): bigint {\n    return BigInt(\n      BigNumber(sizeAmount.toString())\n        .times(BigNumber(priceAmount.toString()))\n        .times(0.00035)\n        .decimalPlaces(0, BigNumber.ROUND_CEIL)\n        .toString()\n    );\n  }\n\n  private calculateMaxCommissionPerOrder(sizeAmounts: bigint[], priceAmounts: bigint[]): bigint {\n    let maxCommission = 0n;\n\n    for (let i = 0; i < sizeAmounts.length; i++) {\n      const commission = this.calculateMaxCommission(sizeAmounts[i] ?? 0n, priceAmounts[i] ?? 0n);\n      if (commission > maxCommission) {\n        maxCommission = commission;\n      }\n    }\n\n    return maxCommission;\n  }\n\n  private async signPermit(isBaseToken: boolean, quantityToPermit: bigint, deadline: bigint): Promise<{ v: string; r: string; s: string }> {\n    const tokenContract = isBaseToken ? this.baseTokenContract : this.quoteTokenContract;\n\n    const owner = await this.signer.getAddress();\n    const spender = this.market.orderbookAddress;\n\n    const domain = {\n      name: await tokenContract.name!(),\n      version: '1',\n      chainId: await this.chainId,\n      verifyingContract: await tokenContract.getAddress(),\n    };\n\n    const types = {\n      Permit: [\n        { name: 'owner', type: 'address' },\n        { name: 'spender', type: 'address' },\n        { name: 'value', type: 'uint256' },\n        { name: 'nonce', type: 'uint256' },\n        { name: 'deadline', type: 'uint256' },\n      ],\n    };\n\n    const nonce = await tokenContract.nonces!(owner);\n    const message = {\n      owner,\n      spender,\n      value: quantityToPermit,\n      nonce,\n      deadline,\n    };\n    const signature = await this.signer.signTypedData(domain, types, message);\n    const splitSig = Signature.from(signature);\n\n    return {\n      v: splitSig.v.toString(),\n      r: splitSig.r,\n      s: splitSig.s,\n    };\n  }\n}\n", "import type { ErrorDescription } from 'ethers';\n\nimport { OnchainLobError } from '../common';\n\nexport class TransactionFailedError extends OnchainLobError {\n  constructor(\n    readonly encodedError: string,\n    readonly error: ErrorDescription | null,\n    options?: ErrorOptions\n  ) {\n    super(`${error ? `${error.name} [${error.selector}]` : `Unknown error: [${encodedError}]`}`, options);\n  }\n}\n", "export const erc20Abi = [\n  {\n    type: 'function',\n    name: 'allowance',\n    inputs: [\n      { name: 'owner', type: 'address', internalType: 'address' },\n      { name: 'spender', type: 'address', internalType: 'address' },\n    ],\n    outputs: [{ name: '', type: 'uint256', internalType: 'uint256' }],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'approve',\n    inputs: [\n      { name: 'spender', type: 'address', internalType: 'address' },\n      { name: 'value', type: 'uint256', internalType: 'uint256' },\n    ],\n    outputs: [{ name: '', type: 'bool', internalType: 'bool' }],\n    stateMutability: 'nonpayable',\n  },\n  {\n    type: 'function',\n    name: 'balanceOf',\n    inputs: [{ name: 'account', type: 'address', internalType: 'address' }],\n    outputs: [{ name: '', type: 'uint256', internalType: 'uint256' }],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'totalSupply',\n    inputs: [],\n    outputs: [{ name: '', type: 'uint256', internalType: 'uint256' }],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'transfer',\n    inputs: [\n      { name: 'to', type: 'address', internalType: 'address' },\n      { name: 'value', type: 'uint256', internalType: 'uint256' },\n    ],\n    outputs: [{ name: '', type: 'bool', internalType: 'bool' }],\n    stateMutability: 'nonpayable',\n  },\n  {\n    type: 'function',\n    name: 'transferFrom',\n    inputs: [\n      { name: 'from', type: 'address', internalType: 'address' },\n      { name: 'to', type: 'address', internalType: 'address' },\n      { name: 'value', type: 'uint256', internalType: 'uint256' },\n    ],\n    outputs: [{ name: '', type: 'bool', internalType: 'bool' }],\n    stateMutability: 'nonpayable',\n  },\n  {\n    type: 'event',\n    name: 'Approval',\n    inputs: [\n      { name: 'owner', type: 'address', indexed: true, internalType: 'address' },\n      { name: 'spender', type: 'address', indexed: true, internalType: 'address' },\n      { name: 'value', type: 'uint256', indexed: false, internalType: 'uint256' },\n    ],\n    anonymous: false,\n  },\n  {\n    type: 'event',\n    name: 'Transfer',\n    inputs: [\n      { name: 'from', type: 'address', indexed: true, internalType: 'address' },\n      { name: 'to', type: 'address', indexed: true, internalType: 'address' },\n      { name: 'value', type: 'uint256', indexed: false, internalType: 'uint256' },\n    ],\n    anonymous: false,\n  },\n] as const;\n", "export const lobAbi = [\n  { type: 'constructor', inputs: [], stateMutability: 'nonpayable' },\n  { type: 'receive', stateMutability: 'payable' },\n  {\n    type: 'function',\n    name: 'UPGRADE_INTERFACE_VERSION',\n    inputs: [],\n    outputs: [{ name: '', type: 'string', internalType: 'string' }],\n    stateMutability: 'view',\n  },\n  { type: 'function', name: 'acceptOwnership', inputs: [], outputs: [], stateMutability: 'nonpayable' },\n  {\n    type: 'function',\n    name: 'batchChangeOrder',\n    inputs: [\n      { name: 'order_ids', type: 'uint64[]', internalType: 'uint64[]' },\n      { name: 'quantities', type: 'uint128[]', internalType: 'uint128[]' },\n      { name: 'prices', type: 'uint72[]', internalType: 'uint72[]' },\n      { name: 'max_commission_per_order', type: 'uint128', internalType: 'uint128' },\n      { name: 'post_only', type: 'bool', internalType: 'bool' },\n      { name: 'transfer_tokens', type: 'bool', internalType: 'bool' },\n      { name: 'expires', type: 'uint256', internalType: 'uint256' },\n    ],\n    outputs: [{ name: 'new_order_ids', type: 'uint64[]', internalType: 'uint64[]' }],\n    stateMutability: 'nonpayable',\n  },\n  {\n    type: 'function',\n    name: 'batchClaim',\n    inputs: [\n      { name: 'addresses', type: 'address[]', internalType: 'address[]' },\n      { name: 'order_ids', type: 'uint64[]', internalType: 'uint64[]' },\n      { name: 'only_claim', type: 'bool', internalType: 'bool' },\n      { name: 'expires', type: 'uint256', internalType: 'uint256' },\n    ],\n    outputs: [],\n    stateMutability: 'nonpayable',\n  },\n  {\n    type: 'function',\n    name: 'changeMarketMaker',\n    inputs: [\n      { name: '_marketmaker', type: 'address', internalType: 'address' },\n      { name: '_should_invoke_on_trade', type: 'bool', internalType: 'bool' },\n      { name: '_admin_commission_rate', type: 'uint64', internalType: 'uint64' },\n    ],\n    outputs: [],\n    stateMutability: 'nonpayable',\n  },\n  {\n    type: 'function',\n    name: 'changeOrder',\n    inputs: [\n      { name: 'old_order_id', type: 'uint64', internalType: 'uint64' },\n      { name: 'new_quantity', type: 'uint128', internalType: 'uint128' },\n      { name: 'new_price', type: 'uint72', internalType: 'uint72' },\n      { name: 'max_commission', type: 'uint128', internalType: 'uint128' },\n      { name: 'post_only', type: 'bool', internalType: 'bool' },\n      { name: 'transfer_tokens', type: 'bool', internalType: 'bool' },\n      { name: 'expires', type: 'uint256', internalType: 'uint256' },\n    ],\n    outputs: [{ name: 'order_id', type: 'uint64', internalType: 'uint64' }],\n    stateMutability: 'nonpayable',\n  },\n  {\n    type: 'function',\n    name: 'changePauser',\n    inputs: [{ name: 'pauser_', type: 'address', internalType: 'address' }],\n    outputs: [],\n    stateMutability: 'nonpayable',\n  },\n  {\n    type: 'function',\n    name: 'claimOrder',\n    inputs: [\n      { name: 'order_id', type: 'uint64', internalType: 'uint64' },\n      { name: 'only_claim', type: 'bool', internalType: 'bool' },\n      { name: 'transfer_tokens', type: 'bool', internalType: 'bool' },\n      { name: 'expires', type: 'uint256', internalType: 'uint256' },\n    ],\n    outputs: [],\n    stateMutability: 'nonpayable',\n  },\n  {\n    type: 'function',\n    name: 'depositTokens',\n    inputs: [\n      { name: 'token_x_amount', type: 'uint128', internalType: 'uint128' },\n      { name: 'token_y_amount', type: 'uint128', internalType: 'uint128' },\n    ],\n    outputs: [],\n    stateMutability: 'nonpayable',\n  },\n  {\n    type: 'function',\n    name: 'depositTokens',\n    inputs: [\n      { name: 'token_x_amount', type: 'uint128', internalType: 'uint128' },\n      { name: 'token_y_amount', type: 'uint128', internalType: 'uint128' },\n      { name: 'v_x', type: 'uint8', internalType: 'uint8' },\n      { name: 'r_x', type: 'bytes32', internalType: 'bytes32' },\n      { name: 's_x', type: 'bytes32', internalType: 'bytes32' },\n      { name: 'v_y', type: 'uint8', internalType: 'uint8' },\n      { name: 'r_y', type: 'bytes32', internalType: 'bytes32' },\n      { name: 's_y', type: 'bytes32', internalType: 'bytes32' },\n      { name: 'expires', type: 'uint256', internalType: 'uint256' },\n    ],\n    outputs: [],\n    stateMutability: 'nonpayable',\n  },\n  {\n    type: 'function',\n    name: 'getAccumulatedFees',\n    inputs: [],\n    outputs: [{ name: '', type: 'uint256', internalType: 'uint256' }],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'getConfig',\n    inputs: [],\n    outputs: [\n      { name: '_scaling_factor_token_x', type: 'uint256', internalType: 'uint256' },\n      { name: '_scaling_factor_token_y', type: 'uint256', internalType: 'uint256' },\n      { name: '_token_x', type: 'address', internalType: 'address' },\n      { name: '_token_y', type: 'address', internalType: 'address' },\n      { name: '_supports_native_eth', type: 'bool', internalType: 'bool' },\n      { name: '_is_token_x_weth', type: 'bool', internalType: 'bool' },\n      { name: '_ask_trie', type: 'address', internalType: 'address' },\n      { name: '_bid_trie', type: 'address', internalType: 'address' },\n      { name: '_admin_commission_rate', type: 'uint64', internalType: 'uint64' },\n      { name: '_total_aggressive_commission_rate', type: 'uint64', internalType: 'uint64' },\n      { name: '_total_passive_commission_rate', type: 'uint64', internalType: 'uint64' },\n      { name: '_passive_order_payout_rate', type: 'uint64', internalType: 'uint64' },\n      { name: '_should_invoke_on_trade', type: 'bool', internalType: 'bool' },\n    ],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'getTraderBalance',\n    inputs: [{ name: 'address_', type: 'address', internalType: 'address' }],\n    outputs: [\n      { name: '', type: 'uint128', internalType: 'uint128' },\n      { name: '', type: 'uint128', internalType: 'uint128' },\n      { name: '', type: 'bool', internalType: 'bool' },\n    ],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'initialize',\n    inputs: [\n      { name: '_trie_factory', type: 'address', internalType: 'address' },\n      { name: '_tokenXAddress', type: 'address', internalType: 'address' },\n      { name: '_tokenYAddress', type: 'address', internalType: 'address' },\n      { name: '_supports_native_eth', type: 'bool', internalType: 'bool' },\n      { name: '_is_token_x_weth', type: 'bool', internalType: 'bool' },\n      { name: 'scaling_token_x', type: 'uint256', internalType: 'uint256' },\n      { name: 'scaling_token_y', type: 'uint256', internalType: 'uint256' },\n      { name: '_administrator', type: 'address', internalType: 'address' },\n      { name: '_marketmaker', type: 'address', internalType: 'address' },\n      { name: '_pauser', type: 'address', internalType: 'address' },\n      { name: '_should_invoke_on_trade', type: 'bool', internalType: 'bool' },\n      { name: '_admin_commission_rate', type: 'uint64', internalType: 'uint64' },\n      { name: '_total_aggressive_commission_rate', type: 'uint64', internalType: 'uint64' },\n      { name: '_total_passive_commission_rate', type: 'uint64', internalType: 'uint64' },\n      { name: '_passive_order_payout_rate', type: 'uint64', internalType: 'uint64' },\n    ],\n    outputs: [],\n    stateMutability: 'nonpayable',\n  },\n  {\n    type: 'function',\n    name: 'marketmaker_config',\n    inputs: [],\n    outputs: [\n      { name: 'marketmaker', type: 'address', internalType: 'address' },\n      { name: 'should_invoke_on_trade', type: 'bool', internalType: 'bool' },\n    ],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'nonce',\n    inputs: [],\n    outputs: [{ name: '', type: 'uint64', internalType: 'uint64' }],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'owner',\n    inputs: [],\n    outputs: [{ name: '', type: 'address', internalType: 'address' }],\n    stateMutability: 'view',\n  },\n  { type: 'function', name: 'pause', inputs: [], outputs: [], stateMutability: 'nonpayable' },\n  {\n    type: 'function',\n    name: 'paused',\n    inputs: [],\n    outputs: [{ name: '', type: 'bool', internalType: 'bool' }],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'pauser',\n    inputs: [],\n    outputs: [{ name: '', type: 'address', internalType: 'address' }],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'pendingOwner',\n    inputs: [],\n    outputs: [{ name: '', type: 'address', internalType: 'address' }],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'placeMarketOrderWithTargetValue',\n    inputs: [\n      { name: 'isAsk', type: 'bool', internalType: 'bool' },\n      { name: 'target_token_y_value', type: 'uint128', internalType: 'uint128' },\n      { name: 'price', type: 'uint72', internalType: 'uint72' },\n      { name: 'max_commission', type: 'uint128', internalType: 'uint128' },\n      { name: 'amount_to_approve', type: 'uint128', internalType: 'uint128' },\n      { name: 'transfer_executed_tokens', type: 'bool', internalType: 'bool' },\n      { name: 'expires', type: 'uint256', internalType: 'uint256' },\n      { name: 'v', type: 'uint8', internalType: 'uint8' },\n      { name: 'r', type: 'bytes32', internalType: 'bytes32' },\n      { name: 's', type: 'bytes32', internalType: 'bytes32' },\n    ],\n    outputs: [\n      { name: 'executed_shares', type: 'uint128', internalType: 'uint128' },\n      { name: 'executed_value', type: 'uint128', internalType: 'uint128' },\n      { name: 'aggressive_fee', type: 'uint128', internalType: 'uint128' },\n    ],\n    stateMutability: 'payable',\n  },\n  {\n    type: 'function',\n    name: 'placeMarketOrderWithTargetValue',\n    inputs: [\n      { name: 'isAsk', type: 'bool', internalType: 'bool' },\n      { name: 'target_token_y_value', type: 'uint128', internalType: 'uint128' },\n      { name: 'price', type: 'uint72', internalType: 'uint72' },\n      { name: 'max_commission', type: 'uint128', internalType: 'uint128' },\n      { name: 'transfer_executed_tokens', type: 'bool', internalType: 'bool' },\n      { name: 'expires', type: 'uint256', internalType: 'uint256' },\n    ],\n    outputs: [\n      { name: 'executed_shares', type: 'uint128', internalType: 'uint128' },\n      { name: 'executed_value', type: 'uint128', internalType: 'uint128' },\n      { name: 'aggressive_fee', type: 'uint128', internalType: 'uint128' },\n    ],\n    stateMutability: 'payable',\n  },\n  {\n    type: 'function',\n    name: 'placeOrder',\n    inputs: [\n      { name: 'isAsk', type: 'bool', internalType: 'bool' },\n      { name: 'quantity', type: 'uint128', internalType: 'uint128' },\n      { name: 'price', type: 'uint72', internalType: 'uint72' },\n      { name: 'max_commission', type: 'uint128', internalType: 'uint128' },\n      { name: 'amount_to_approve', type: 'uint128', internalType: 'uint128' },\n      { name: 'market_only', type: 'bool', internalType: 'bool' },\n      { name: 'post_only', type: 'bool', internalType: 'bool' },\n      { name: 'transfer_executed_tokens', type: 'bool', internalType: 'bool' },\n      { name: 'expires', type: 'uint256', internalType: 'uint256' },\n      { name: 'v', type: 'uint8', internalType: 'uint8' },\n      { name: 'r', type: 'bytes32', internalType: 'bytes32' },\n      { name: 's', type: 'bytes32', internalType: 'bytes32' },\n    ],\n    outputs: [\n      { name: 'order_id', type: 'uint64', internalType: 'uint64' },\n      { name: 'executed_shares', type: 'uint128', internalType: 'uint128' },\n      { name: 'executed_value', type: 'uint128', internalType: 'uint128' },\n      { name: 'aggressive_fee', type: 'uint128', internalType: 'uint128' },\n    ],\n    stateMutability: 'payable',\n  },\n  {\n    type: 'function',\n    name: 'placeOrder',\n    inputs: [\n      { name: 'isAsk', type: 'bool', internalType: 'bool' },\n      { name: 'quantity', type: 'uint128', internalType: 'uint128' },\n      { name: 'price', type: 'uint72', internalType: 'uint72' },\n      { name: 'max_commission', type: 'uint128', internalType: 'uint128' },\n      { name: 'market_only', type: 'bool', internalType: 'bool' },\n      { name: 'post_only', type: 'bool', internalType: 'bool' },\n      { name: 'transfer_executed_tokens', type: 'bool', internalType: 'bool' },\n      { name: 'expires', type: 'uint256', internalType: 'uint256' },\n    ],\n    outputs: [\n      { name: 'order_id', type: 'uint64', internalType: 'uint64' },\n      { name: 'executed_shares', type: 'uint128', internalType: 'uint128' },\n      { name: 'executed_value', type: 'uint128', internalType: 'uint128' },\n      { name: 'aggressive_fee', type: 'uint128', internalType: 'uint128' },\n    ],\n    stateMutability: 'payable',\n  },\n  {\n    type: 'function',\n    name: 'proxiableUUID',\n    inputs: [],\n    outputs: [{ name: '', type: 'bytes32', internalType: 'bytes32' }],\n    stateMutability: 'view',\n  },\n  { type: 'function', name: 'renounceOwnership', inputs: [], outputs: [], stateMutability: 'nonpayable' },\n  {\n    type: 'function',\n    name: 'setClaimableStatus',\n    inputs: [{ name: 'status', type: 'bool', internalType: 'bool' }],\n    outputs: [],\n    stateMutability: 'nonpayable',\n  },\n  { type: 'function', name: 'transferFees', inputs: [], outputs: [], stateMutability: 'nonpayable' },\n  {\n    type: 'function',\n    name: 'transferOwnership',\n    inputs: [{ name: 'newOwner', type: 'address', internalType: 'address' }],\n    outputs: [],\n    stateMutability: 'nonpayable',\n  },\n  { type: 'function', name: 'unpause', inputs: [], outputs: [], stateMutability: 'nonpayable' },\n  {\n    type: 'function',\n    name: 'upgradeToAndCall',\n    inputs: [\n      { name: 'newImplementation', type: 'address', internalType: 'address' },\n      { name: 'data', type: 'bytes', internalType: 'bytes' },\n    ],\n    outputs: [],\n    stateMutability: 'payable',\n  },\n  {\n    type: 'function',\n    name: 'withdrawTokens',\n    inputs: [\n      { name: 'withdraw_all', type: 'bool', internalType: 'bool' },\n      { name: 'token_x_amount', type: 'uint128', internalType: 'uint128' },\n      { name: 'token_y_amount', type: 'uint128', internalType: 'uint128' },\n    ],\n    outputs: [],\n    stateMutability: 'nonpayable',\n  },\n  {\n    type: 'event',\n    name: 'ClaimableStatusChanged',\n    inputs: [\n      { name: 'owner', type: 'address', indexed: true, internalType: 'address' },\n      { name: 'status', type: 'bool', indexed: false, internalType: 'bool' },\n    ],\n    anonymous: false,\n  },\n  {\n    type: 'event',\n    name: 'Deposited',\n    inputs: [\n      { name: 'owner', type: 'address', indexed: true, internalType: 'address' },\n      { name: 'token_x', type: 'uint128', indexed: false, internalType: 'uint128' },\n      { name: 'token_y', type: 'uint128', indexed: false, internalType: 'uint128' },\n    ],\n    anonymous: false,\n  },\n  {\n    type: 'event',\n    name: 'Initialized',\n    inputs: [{ name: 'version', type: 'uint64', indexed: false, internalType: 'uint64' }],\n    anonymous: false,\n  },\n  {\n    type: 'event',\n    name: 'MarketMakerChanged',\n    inputs: [\n      { name: 'new_marketmaker', type: 'address', indexed: false, internalType: 'address' },\n      { name: 'old_marketmaker', type: 'address', indexed: false, internalType: 'address' },\n    ],\n    anonymous: false,\n  },\n  {\n    type: 'event',\n    name: 'OrderClaimed',\n    inputs: [\n      { name: 'order_id', type: 'uint64', indexed: false, internalType: 'uint64' },\n      { name: 'order_shares_remaining', type: 'uint128', indexed: false, internalType: 'uint128' },\n      { name: 'token_x_sent', type: 'uint128', indexed: false, internalType: 'uint128' },\n      { name: 'token_y_sent', type: 'uint128', indexed: false, internalType: 'uint128' },\n      { name: 'passive_payout', type: 'uint128', indexed: false, internalType: 'uint128' },\n      { name: 'only_claim', type: 'bool', indexed: false, internalType: 'bool' },\n    ],\n    anonymous: false,\n  },\n  {\n    type: 'event',\n    name: 'OrderPlaced',\n    inputs: [\n      { name: 'owner', type: 'address', indexed: true, internalType: 'address' },\n      { name: 'order_id', type: 'uint64', indexed: false, internalType: 'uint64' },\n      { name: 'isAsk', type: 'bool', indexed: true, internalType: 'bool' },\n      { name: 'quantity', type: 'uint128', indexed: false, internalType: 'uint128' },\n      { name: 'price', type: 'uint72', indexed: false, internalType: 'uint72' },\n      { name: 'passive_shares', type: 'uint128', indexed: false, internalType: 'uint128' },\n      { name: 'passive_fee', type: 'uint128', indexed: false, internalType: 'uint128' },\n      { name: 'aggressive_shares', type: 'uint128', indexed: false, internalType: 'uint128' },\n      { name: 'aggressive_value', type: 'uint128', indexed: false, internalType: 'uint128' },\n      { name: 'aggressive_fee', type: 'uint128', indexed: false, internalType: 'uint128' },\n      { name: 'market_only', type: 'bool', indexed: false, internalType: 'bool' },\n      { name: 'post_only', type: 'bool', indexed: false, internalType: 'bool' },\n    ],\n    anonymous: false,\n  },\n  {\n    type: 'event',\n    name: 'OwnershipTransferStarted',\n    inputs: [\n      { name: 'previousOwner', type: 'address', indexed: true, internalType: 'address' },\n      { name: 'newOwner', type: 'address', indexed: true, internalType: 'address' },\n    ],\n    anonymous: false,\n  },\n  {\n    type: 'event',\n    name: 'OwnershipTransferred',\n    inputs: [\n      { name: 'previousOwner', type: 'address', indexed: true, internalType: 'address' },\n      { name: 'newOwner', type: 'address', indexed: true, internalType: 'address' },\n    ],\n    anonymous: false,\n  },\n  {\n    type: 'event',\n    name: 'Paused',\n    inputs: [{ name: 'account', type: 'address', indexed: false, internalType: 'address' }],\n    anonymous: false,\n  },\n  {\n    type: 'event',\n    name: 'PauserChanged',\n    inputs: [\n      { name: 'new_pauser', type: 'address', indexed: false, internalType: 'address' },\n      { name: 'old_pauser', type: 'address', indexed: false, internalType: 'address' },\n    ],\n    anonymous: false,\n  },\n  {\n    type: 'event',\n    name: 'Unpaused',\n    inputs: [{ name: 'account', type: 'address', indexed: false, internalType: 'address' }],\n    anonymous: false,\n  },\n  {\n    type: 'event',\n    name: 'Upgraded',\n    inputs: [{ name: 'implementation', type: 'address', indexed: true, internalType: 'address' }],\n    anonymous: false,\n  },\n  {\n    type: 'event',\n    name: 'Withdrawn',\n    inputs: [\n      { name: 'owner', type: 'address', indexed: true, internalType: 'address' },\n      { name: 'token_x', type: 'uint128', indexed: false, internalType: 'uint128' },\n      { name: 'token_y', type: 'uint128', indexed: false, internalType: 'uint128' },\n    ],\n    anonymous: false,\n  },\n  {\n    type: 'error',\n    name: 'AddressEmptyCode',\n    inputs: [{ name: 'target', type: 'address', internalType: 'address' }],\n  },\n  {\n    type: 'error',\n    name: 'AddressInsufficientBalance',\n    inputs: [{ name: 'account', type: 'address', internalType: 'address' }],\n  },\n  { type: 'error', name: 'AddressIsZero', inputs: [] },\n  { type: 'error', name: 'ArrayLengthMismatch', inputs: [] },\n  { type: 'error', name: 'ClaimNotAllowed', inputs: [] },\n  {\n    type: 'error',\n    name: 'ERC1967InvalidImplementation',\n    inputs: [{ name: 'implementation', type: 'address', internalType: 'address' }],\n  },\n  { type: 'error', name: 'ERC1967NonPayable', inputs: [] },\n  { type: 'error', name: 'EnforcedPause', inputs: [] },\n  { type: 'error', name: 'ExcessiveSignificantFigures', inputs: [] },\n  { type: 'error', name: 'ExpectedPause', inputs: [] },\n  { type: 'error', name: 'Expired', inputs: [] },\n  { type: 'error', name: 'FailedInnerCall', inputs: [] },\n  { type: 'error', name: 'Forbidden', inputs: [] },\n  { type: 'error', name: 'InsufficientTokenXBalance', inputs: [] },\n  { type: 'error', name: 'InsufficientTokenYBalance', inputs: [] },\n  { type: 'error', name: 'InvalidCommissionRate', inputs: [] },\n  { type: 'error', name: 'InvalidFloatingPointRepresentation', inputs: [] },\n  { type: 'error', name: 'InvalidInitialization', inputs: [] },\n  { type: 'error', name: 'InvalidMarketMaker', inputs: [] },\n  { type: 'error', name: 'InvalidPriceRange', inputs: [] },\n  { type: 'error', name: 'InvalidTransfer', inputs: [] },\n  { type: 'error', name: 'MarketOnlyAndPostOnlyFlagsConflict', inputs: [] },\n  { type: 'error', name: 'MaxCommissionFailure', inputs: [] },\n  { type: 'error', name: 'NativeETHDisabled', inputs: [] },\n  { type: 'error', name: 'NonceExhaustedFailure', inputs: [] },\n  { type: 'error', name: 'NotInitializing', inputs: [] },\n  { type: 'error', name: 'OnlyOwnerCanCancelOrders', inputs: [] },\n  {\n    type: 'error',\n    name: 'OwnableInvalidOwner',\n    inputs: [{ name: 'owner', type: 'address', internalType: 'address' }],\n  },\n  {\n    type: 'error',\n    name: 'OwnableUnauthorizedAccount',\n    inputs: [{ name: 'account', type: 'address', internalType: 'address' }],\n  },\n  { type: 'error', name: 'ReentrancyGuardReentrantCall', inputs: [] },\n  {\n    type: 'error',\n    name: 'SafeCastOverflowedUintDowncast',\n    inputs: [\n      { name: 'bits', type: 'uint8', internalType: 'uint8' },\n      { name: 'value', type: 'uint256', internalType: 'uint256' },\n    ],\n  },\n  {\n    type: 'error',\n    name: 'SafeERC20FailedOperation',\n    inputs: [{ name: 'token', type: 'address', internalType: 'address' }],\n  },\n  { type: 'error', name: 'TransferFailed', inputs: [] },\n  { type: 'error', name: 'UUPSUnauthorizedCallContext', inputs: [] },\n  {\n    type: 'error',\n    name: 'UUPSUnsupportedProxiableUUID',\n    inputs: [{ name: 'slot', type: 'bytes32', internalType: 'bytes32' }],\n  },\n  { type: 'error', name: 'ZeroTokenTransferNotAllowed', inputs: [] },\n] as const;\n", "export const erc20PermitAbi = [\n  {\n    type: 'function',\n    name: 'DOMAIN_SEPARATOR',\n    inputs: [],\n    outputs: [\n      {\n        name: '',\n        type: 'bytes32',\n        internalType: 'bytes32',\n      },\n    ],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'allowance',\n    inputs: [\n      {\n        name: 'owner',\n        type: 'address',\n        internalType: 'address',\n      },\n      {\n        name: 'spender',\n        type: 'address',\n        internalType: 'address',\n      },\n    ],\n    outputs: [\n      {\n        name: '',\n        type: 'uint256',\n        internalType: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'approve',\n    inputs: [\n      {\n        name: 'spender',\n        type: 'address',\n        internalType: 'address',\n      },\n      {\n        name: 'value',\n        type: 'uint256',\n        internalType: 'uint256',\n      },\n    ],\n    outputs: [\n      {\n        name: '',\n        type: 'bool',\n        internalType: 'bool',\n      },\n    ],\n    stateMutability: 'nonpayable',\n  },\n  {\n    type: 'function',\n    name: 'balanceOf',\n    inputs: [\n      {\n        name: 'account',\n        type: 'address',\n        internalType: 'address',\n      },\n    ],\n    outputs: [\n      {\n        name: '',\n        type: 'uint256',\n        internalType: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'decimals',\n    inputs: [],\n    outputs: [\n      {\n        name: '',\n        type: 'uint8',\n        internalType: 'uint8',\n      },\n    ],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'eip712Domain',\n    inputs: [],\n    outputs: [\n      {\n        name: 'fields',\n        type: 'bytes1',\n        internalType: 'bytes1',\n      },\n      {\n        name: 'name',\n        type: 'string',\n        internalType: 'string',\n      },\n      {\n        name: 'version',\n        type: 'string',\n        internalType: 'string',\n      },\n      {\n        name: 'chainId',\n        type: 'uint256',\n        internalType: 'uint256',\n      },\n      {\n        name: 'verifyingContract',\n        type: 'address',\n        internalType: 'address',\n      },\n      {\n        name: 'salt',\n        type: 'bytes32',\n        internalType: 'bytes32',\n      },\n      {\n        name: 'extensions',\n        type: 'uint256[]',\n        internalType: 'uint256[]',\n      },\n    ],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'name',\n    inputs: [],\n    outputs: [\n      {\n        name: '',\n        type: 'string',\n        internalType: 'string',\n      },\n    ],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'nonces',\n    inputs: [\n      {\n        name: 'owner',\n        type: 'address',\n        internalType: 'address',\n      },\n    ],\n    outputs: [\n      {\n        name: '',\n        type: 'uint256',\n        internalType: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'permit',\n    inputs: [\n      {\n        name: 'owner',\n        type: 'address',\n        internalType: 'address',\n      },\n      {\n        name: 'spender',\n        type: 'address',\n        internalType: 'address',\n      },\n      {\n        name: 'value',\n        type: 'uint256',\n        internalType: 'uint256',\n      },\n      {\n        name: 'deadline',\n        type: 'uint256',\n        internalType: 'uint256',\n      },\n      {\n        name: 'v',\n        type: 'uint8',\n        internalType: 'uint8',\n      },\n      {\n        name: 'r',\n        type: 'bytes32',\n        internalType: 'bytes32',\n      },\n      {\n        name: 's',\n        type: 'bytes32',\n        internalType: 'bytes32',\n      },\n    ],\n    outputs: [],\n    stateMutability: 'nonpayable',\n  },\n  {\n    type: 'function',\n    name: 'symbol',\n    inputs: [],\n    outputs: [\n      {\n        name: '',\n        type: 'string',\n        internalType: 'string',\n      },\n    ],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'totalSupply',\n    inputs: [],\n    outputs: [\n      {\n        name: '',\n        type: 'uint256',\n        internalType: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'transfer',\n    inputs: [\n      {\n        name: 'to',\n        type: 'address',\n        internalType: 'address',\n      },\n      {\n        name: 'value',\n        type: 'uint256',\n        internalType: 'uint256',\n      },\n    ],\n    outputs: [\n      {\n        name: '',\n        type: 'bool',\n        internalType: 'bool',\n      },\n    ],\n    stateMutability: 'nonpayable',\n  },\n  {\n    type: 'function',\n    name: 'transferFrom',\n    inputs: [\n      {\n        name: 'from',\n        type: 'address',\n        internalType: 'address',\n      },\n      {\n        name: 'to',\n        type: 'address',\n        internalType: 'address',\n      },\n      {\n        name: 'value',\n        type: 'uint256',\n        internalType: 'uint256',\n      },\n    ],\n    outputs: [\n      {\n        name: '',\n        type: 'bool',\n        internalType: 'bool',\n      },\n    ],\n    stateMutability: 'nonpayable',\n  },\n  {\n    type: 'event',\n    name: 'Approval',\n    inputs: [\n      {\n        name: 'owner',\n        type: 'address',\n        indexed: true,\n        internalType: 'address',\n      },\n      {\n        name: 'spender',\n        type: 'address',\n        indexed: true,\n        internalType: 'address',\n      },\n      {\n        name: 'value',\n        type: 'uint256',\n        indexed: false,\n        internalType: 'uint256',\n      },\n    ],\n    anonymous: false,\n  },\n  {\n    type: 'event',\n    name: 'EIP712DomainChanged',\n    inputs: [],\n    anonymous: false,\n  },\n  {\n    type: 'event',\n    name: 'Transfer',\n    inputs: [\n      {\n        name: 'from',\n        type: 'address',\n        indexed: true,\n        internalType: 'address',\n      },\n      {\n        name: 'to',\n        type: 'address',\n        indexed: true,\n        internalType: 'address',\n      },\n      {\n        name: 'value',\n        type: 'uint256',\n        indexed: false,\n        internalType: 'uint256',\n      },\n    ],\n    anonymous: false,\n  },\n  {\n    type: 'error',\n    name: 'ECDSAInvalidSignature',\n    inputs: [],\n  },\n  {\n    type: 'error',\n    name: 'ECDSAInvalidSignatureLength',\n    inputs: [\n      {\n        name: 'length',\n        type: 'uint256',\n        internalType: 'uint256',\n      },\n    ],\n  },\n  {\n    type: 'error',\n    name: 'ECDSAInvalidSignatureS',\n    inputs: [\n      {\n        name: 's',\n        type: 'bytes32',\n        internalType: 'bytes32',\n      },\n    ],\n  },\n  {\n    type: 'error',\n    name: 'ERC20InsufficientAllowance',\n    inputs: [\n      {\n        name: 'spender',\n        type: 'address',\n        internalType: 'address',\n      },\n      {\n        name: 'allowance',\n        type: 'uint256',\n        internalType: 'uint256',\n      },\n      {\n        name: 'needed',\n        type: 'uint256',\n        internalType: 'uint256',\n      },\n    ],\n  },\n  {\n    type: 'error',\n    name: 'ERC20InsufficientBalance',\n    inputs: [\n      {\n        name: 'sender',\n        type: 'address',\n        internalType: 'address',\n      },\n      {\n        name: 'balance',\n        type: 'uint256',\n        internalType: 'uint256',\n      },\n      {\n        name: 'needed',\n        type: 'uint256',\n        internalType: 'uint256',\n      },\n    ],\n  },\n  {\n    type: 'error',\n    name: 'ERC20InvalidApprover',\n    inputs: [\n      {\n        name: 'approver',\n        type: 'address',\n        internalType: 'address',\n      },\n    ],\n  },\n  {\n    type: 'error',\n    name: 'ERC20InvalidReceiver',\n    inputs: [\n      {\n        name: 'receiver',\n        type: 'address',\n        internalType: 'address',\n      },\n    ],\n  },\n  {\n    type: 'error',\n    name: 'ERC20InvalidSender',\n    inputs: [\n      {\n        name: 'sender',\n        type: 'address',\n        internalType: 'address',\n      },\n    ],\n  },\n  {\n    type: 'error',\n    name: 'ERC20InvalidSpender',\n    inputs: [\n      {\n        name: 'spender',\n        type: 'address',\n        internalType: 'address',\n      },\n    ],\n  },\n  {\n    type: 'error',\n    name: 'ERC2612ExpiredSignature',\n    inputs: [\n      {\n        name: 'deadline',\n        type: 'uint256',\n        internalType: 'uint256',\n      },\n    ],\n  },\n  {\n    type: 'error',\n    name: 'ERC2612InvalidSigner',\n    inputs: [\n      {\n        name: 'signer',\n        type: 'address',\n        internalType: 'address',\n      },\n      {\n        name: 'owner',\n        type: 'address',\n        internalType: 'address',\n      },\n    ],\n  },\n  {\n    type: 'error',\n    name: 'InvalidAccountNonce',\n    inputs: [\n      {\n        name: 'account',\n        type: 'address',\n        internalType: 'address',\n      },\n      {\n        name: 'currentNonce',\n        type: 'uint256',\n        internalType: 'uint256',\n      },\n    ],\n  },\n  {\n    type: 'error',\n    name: 'InvalidShortString',\n    inputs: [],\n  },\n  {\n    type: 'error',\n    name: 'StringTooLong',\n    inputs: [\n      {\n        name: 'str',\n        type: 'string',\n        internalType: 'string',\n      },\n    ],\n  },\n] as const;\n", "export const erc20WethAbi = [\n  {\n    type: 'function',\n    name: 'deposit',\n    inputs: [],\n    outputs: [],\n    stateMutability: 'payable',\n  },\n  {\n    type: 'function',\n    name: 'withdraw',\n    inputs: [\n      { name: 'wad', type: 'uint256', internalType: 'uint256' },\n    ],\n    outputs: [],\n    stateMutability: 'nonpayable',\n  },\n  {\n    type: 'function',\n    name: 'allowance',\n    inputs: [\n      { name: 'owner', type: 'address', internalType: 'address' },\n      { name: 'spender', type: 'address', internalType: 'address' },\n    ],\n    outputs: [{ name: '', type: 'uint256', internalType: 'uint256' }],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'approve',\n    inputs: [\n      { name: 'spender', type: 'address', internalType: 'address' },\n      { name: 'value', type: 'uint256', internalType: 'uint256' },\n    ],\n    outputs: [{ name: '', type: 'bool', internalType: 'bool' }],\n    stateMutability: 'nonpayable',\n  },\n  {\n    type: 'function',\n    name: 'balanceOf',\n    inputs: [{ name: 'account', type: 'address', internalType: 'address' }],\n    outputs: [{ name: '', type: 'uint256', internalType: 'uint256' }],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'totalSupply',\n    inputs: [],\n    outputs: [{ name: '', type: 'uint256', internalType: 'uint256' }],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'transfer',\n    inputs: [\n      { name: 'to', type: 'address', internalType: 'address' },\n      { name: 'value', type: 'uint256', internalType: 'uint256' },\n    ],\n    outputs: [{ name: '', type: 'bool', internalType: 'bool' }],\n    stateMutability: 'nonpayable',\n  },\n  {\n    type: 'function',\n    name: 'transferFrom',\n    inputs: [\n      { name: 'from', type: 'address', internalType: 'address' },\n      { name: 'to', type: 'address', internalType: 'address' },\n      { name: 'value', type: 'uint256', internalType: 'uint256' },\n    ],\n    outputs: [{ name: '', type: 'bool', internalType: 'bool' }],\n    stateMutability: 'nonpayable',\n  },\n  {\n    type: 'event',\n    name: 'Approval',\n    inputs: [\n      { name: 'owner', type: 'address', indexed: true, internalType: 'address' },\n      { name: 'spender', type: 'address', indexed: true, internalType: 'address' },\n      { name: 'value', type: 'uint256', indexed: false, internalType: 'uint256' },\n    ],\n    anonymous: false,\n  },\n  {\n    type: 'event',\n    name: 'Transfer',\n    inputs: [\n      { name: 'from', type: 'address', indexed: true, internalType: 'address' },\n      { name: 'to', type: 'address', indexed: true, internalType: 'address' },\n      { name: 'value', type: 'uint256', indexed: false, internalType: 'uint256' },\n    ],\n    anonymous: false,\n  },\n] as const;\n", "import BigNumber from 'bignumber.js';\nimport type {\n  Token,\n  Market,\n  OrderbookLevel,\n  Orderbook,\n  Trade,\n  MarketUpdate,\n  OrderbookUpdate,\n  TradeUpdate,\n  OrderUpdate,\n  FillUpdate,\n  Fill,\n  OrderHistoryUpdate\n} from '../models';\nimport type {\n  TokenDto,\n  MarketDto,\n  OrderbookLevelDto,\n  OrderbookDto,\n  TradeDto,\n  FillDto\n} from '../services/onchainLobSpotService';\nimport type {\n  FillUpdateDto,\n  MarketUpdateDto,\n  OrderHistoryUpdateDto,\n  OrderUpdateDto,\n  OrderbookUpdateDto,\n  TradeUpdateDto\n} from '../services/onchainLobSpotWebSocketService/dtos';\nimport { tokenUtils } from '../utils';\n\nexport const mapTokenDtoToToken = (dto: TokenDto): Token => {\n  return dto;\n};\n\nexport const mapMarketDtoToMarket = (dto: MarketDto, priceFactor: number, sizeFactor: number): Market => {\n  return {\n    ...dto,\n    rawLastPrice: dto.lastPrice ? BigInt(dto.lastPrice) : null,\n    lastPrice: dto.lastPrice ? tokenUtils.convertTokensRawAmountToAmount(dto.lastPrice, priceFactor) : null,\n    rawLowPrice24h: dto.lowPrice24h ? BigInt(dto.lowPrice24h) : null,\n    lowPrice24h: dto.lowPrice24h ? tokenUtils.convertTokensRawAmountToAmount(dto.lowPrice24h, priceFactor) : null,\n    rawHighPrice24h: dto.highPrice24h ? BigInt(dto.highPrice24h) : null,\n    highPrice24h: dto.highPrice24h ? tokenUtils.convertTokensRawAmountToAmount(dto.highPrice24h, priceFactor) : null,\n    rawPrice24h: dto.price24h ? BigInt(dto.price24h) : null,\n    price24h: dto.price24h ? tokenUtils.convertTokensRawAmountToAmount(dto.price24h, priceFactor) : null,\n    rawBestAsk: dto.bestAsk ? BigInt(dto.bestAsk) : null,\n    bestAsk: dto.bestAsk ? tokenUtils.convertTokensRawAmountToAmount(dto.bestAsk, priceFactor) : null,\n    rawBestBid: dto.bestBid ? BigInt(dto.bestBid) : null,\n    bestBid: dto.bestBid ? tokenUtils.convertTokensRawAmountToAmount(dto.bestBid, priceFactor) : null,\n    rawTradingVolume24h: dto.tradingVolume24h ? BigInt(dto.tradingVolume24h) : null,\n    tradingVolume24h: dto.tradingVolume24h ? tokenUtils.convertTokensRawAmountToAmount(dto.tradingVolume24h, sizeFactor) : null,\n    totalSupply: dto.totalSupply ? BigNumber(dto.totalSupply) : null,\n    lastTouched: dto.lastTouched,\n    aggressiveFee: Number(dto.aggressiveFee),\n    passiveFee: Number(dto.passiveFee),\n    passiveOrderPayout: Number(dto.passiveOrderPayout),\n  };\n};\n\nconst mapOrderbookLevelDtoToOrderbookLevel = (dto: OrderbookLevelDto, priceFactor: number, sizeFactor: number): OrderbookLevel => {\n  const price = BigNumber(dto.price);\n  const size = BigNumber(dto.size);\n  return {\n    rawPrice: tokenUtils.convertTokensAmountToRawAmount(price, priceFactor),\n    price,\n    rawSize: tokenUtils.convertTokensAmountToRawAmount(size, sizeFactor),\n    size: size,\n  };\n};\n\nexport const mapOrderbookDtoToOrderbook = (dto: OrderbookDto, priceFactor: number, sizeFactor: number): Orderbook => {\n  const asks = dto.levels.asks.map(ask => mapOrderbookLevelDtoToOrderbookLevel(ask, priceFactor, sizeFactor));\n  const bids = dto.levels.bids.map(bid => mapOrderbookLevelDtoToOrderbookLevel(bid, priceFactor, sizeFactor));\n\n  return {\n    ...dto,\n    levels: {\n      asks,\n      bids,\n    },\n  };\n};\n\nexport const mapTradeDtoToTrade = (dto: TradeDto, priceFactor: number, sizeFactor: number): Trade => {\n  return {\n    ...dto,\n    rawPrice: BigInt(dto.price),\n    price: tokenUtils.convertTokensRawAmountToAmount(dto.price, priceFactor),\n    rawSize: BigInt(dto.size),\n    size: tokenUtils.convertTokensRawAmountToAmount(dto.size, sizeFactor),\n  };\n};\n\nexport const mapOrderDtoToOrder = (dto: OrderUpdateDto, priceFactor: number, sizeFactor: number): OrderUpdate => {\n  return {\n    ...dto,\n    lastTouched: dto.lastTouched,\n    rawPrice: BigInt(dto.price),\n    price: tokenUtils.convertTokensRawAmountToAmount(dto.price, priceFactor),\n    rawSize: BigInt(dto.size),\n    size: tokenUtils.convertTokensRawAmountToAmount(dto.size, sizeFactor),\n    rawOrigSize: BigInt(dto.origSize),\n    origSize: tokenUtils.convertTokensRawAmountToAmount(dto.origSize, sizeFactor),\n    rawClaimed: BigInt(dto.claimed),\n    claimed: tokenUtils.convertTokensRawAmountToAmount(dto.claimed, sizeFactor),\n  };\n};\n\nexport const mapOrderHistoryDtoToOrderHistory = (dto: OrderHistoryUpdateDto, priceFactor: number, tokenXFactor: number, tokenYFactor: number): OrderHistoryUpdate => {\n  return {\n    ...dto,\n    rawPrice: BigInt(dto.price),\n    price: tokenUtils.convertTokensRawAmountToAmount(dto.price, priceFactor),\n    rawSize: BigInt(dto.size),\n    size: tokenUtils.convertTokensRawAmountToAmount(dto.size, tokenXFactor),\n    rawOrigSize: BigInt(dto.origSize),\n    origSize: tokenUtils.convertTokensRawAmountToAmount(dto.origSize, tokenXFactor),\n    rawClaimed: BigInt(dto.claimed),\n    claimed: tokenUtils.convertTokensRawAmountToAmount(dto.claimed, tokenXFactor),\n    rawFee: BigInt(dto.fee),\n    fee: tokenUtils.convertTokensRawAmountToAmount(dto.fee, tokenYFactor),\n  };\n};\n\nexport const mapFillDtoToFill = (dto: FillDto, priceFactor: number, tokenXFactor: number, tokenYFactor: number): Fill => {\n  return {\n    ...dto,\n    rawPrice: BigInt(dto.price),\n    price: tokenUtils.convertTokensRawAmountToAmount(dto.price, priceFactor),\n    rawSize: BigInt(dto.size),\n    size: tokenUtils.convertTokensRawAmountToAmount(dto.size, tokenXFactor),\n    rawFee: BigInt(dto.fee),\n    fee: tokenUtils.convertTokensRawAmountToAmount(dto.fee, tokenYFactor),\n  };\n};\n\nexport const mapMarketUpdateDtoToMarketUpdate = (\n  _marketId: string,\n  dto: MarketUpdateDto,\n  priceFactor: number,\n  sizeFactor: number\n): MarketUpdate => mapMarketDtoToMarket(dto, priceFactor, sizeFactor);\n\nexport const mapOrderbookUpdateDtoToOrderbookUpdate = (\n  _marketId: string,\n  dto: OrderbookUpdateDto,\n  priceFactor: number,\n  sizeFactor: number\n): OrderbookUpdate => mapOrderbookDtoToOrderbook(dto, priceFactor, sizeFactor);\n\nexport const mapTradeUpdateDtoToTradeUpdate = (\n  _marketId: string,\n  dto: TradeUpdateDto,\n  priceFactor: number,\n  sizeFactor: number\n): TradeUpdate => mapTradeDtoToTrade(dto, priceFactor, sizeFactor);\n\nexport const mapOrderUpdateDtoToOrderUpdate = (\n  _marketId: string,\n  dto: OrderUpdateDto,\n  priceFactor: number,\n  sizeFactor: number\n): OrderUpdate => mapOrderDtoToOrder(dto, priceFactor, sizeFactor);\n\nexport const mapOrderHistoryUpdateDtoToOrderHistoryUpdate = (\n  _marketId: string,\n  dto: OrderHistoryUpdateDto,\n  priceFactor: number,\n  tokenXFactor: number,\n  tokenYFactor: number\n): OrderHistoryUpdate => mapOrderHistoryDtoToOrderHistory(dto, priceFactor, tokenXFactor, tokenYFactor);\n\nexport const mapFillUpdateDtoToFillUpdate = (\n  _marketId: string,\n  dto: FillUpdateDto,\n  priceFactor: number,\n  tokenXFactor: number,\n  tokenYFactor: number\n): FillUpdate => mapFillDtoToFill(dto, priceFactor, tokenXFactor, tokenYFactor);\n", "export const getErrorLogMessage = (error: any): string => {\n  if (!error)\n    return `[error is ${error === null ? 'null' : 'undefined'}]`;\n\n  if (typeof error === 'string')\n    return error;\n  else if (typeof error?.message === 'string')\n    return error.message;\n\n  return '[unknown error type]';\n};\n", "import { OnchainLobError } from '../common';\nimport { textUtils } from '../utils';\n\nexport type RemoteServiceResponseFormat = 'none' | 'json' | 'text';\n\nexport class RemoteServiceResponseError extends OnchainLobError {\n  constructor(status: Response['status'], content: string) {\n    super(RemoteServiceResponseError.getMessage(status, content));\n  }\n\n  protected static getMessage(status: Response['status'], content: string): string {\n    return `Response Error [Code: ${status}]. Content = ${content}`;\n  }\n}\n\nexport abstract class RemoteService {\n  readonly baseUrl: string;\n\n  constructor(baseUrl: string) {\n    this.baseUrl = textUtils.trimSlashes(baseUrl);\n  }\n\n  protected getUrl(uri: string) {\n    return new URL(this.baseUrl + '/' + textUtils.trimSlashes(uri));\n  }\n\n  protected async getRequestInit(requestInit: RequestInit = {}) {\n    const headers = new Headers(requestInit.headers);\n    if (!headers.has('Accept'))\n      headers.append('Accept', 'application/json');\n    if (!headers.has('Content-Type'))\n      headers.append('Content-Type', 'application/json');\n\n    requestInit.headers = headers;\n    return requestInit;\n  }\n\n  protected async fetch<T>(\n    uriOrUrl: string | URL,\n    responseFormat: T extends void ? 'none' : Exclude<RemoteServiceResponseFormat, 'none'>,\n    requestInit?: RequestInit,\n    useDefaultRequestInitFields = true\n  ): Promise<T> {\n    if (useDefaultRequestInitFields)\n      requestInit = await this.getRequestInit(requestInit);\n\n    const url = typeof uriOrUrl === 'string' ? this.getUrl(uriOrUrl) : uriOrUrl;\n    const response = await fetch(url.href, requestInit);\n\n    await this.ensureResponseOk(response);\n\n    return responseFormat === 'none'\n      ? undefined\n      : (await (responseFormat === 'json' ? response.json() : response.text()));\n  }\n\n  protected async ensureResponseOk(response: Response) {\n    if (response.ok)\n      return;\n\n    let content: string | undefined;\n    try {\n      content = await response.text();\n    }\n    catch {\n      content = '[unavailable]';\n    }\n\n    throw new RemoteServiceResponseError(response.status, content);\n  }\n}\n", "export const ALL_MARKETS_ID = 'allMarkets';\n", "import type { CandleDto, FillDto, LimitDetailsDto, MarketDetailsDto, MarketDto, OrderDto, OrderHistoryDto, OrderbookDto, TokenDto, TradeDto, UserBalancesDto, UserDepositsDto } from './dtos';\nimport type { CalculateLimitDetailsParams, CalculateMarketDetailsParams, GetCandlesParams, GetFillsParams, GetMarketsParams, GetOrderbookParams, GetOrderHistoryParams, GetOrdersParams, GetTokensParams, GetTradesParams, GetUserBalancesParams, GetUserDepositsParams } from './params';\nimport { guards } from '../../utils';\nimport { RemoteService } from '../remoteService';\nimport { ALL_MARKETS_ID } from '../constants';\n\n/**\n * OnchainLobSpotService provides methods to interact with the Onchain LOB spot market API.\n * It extends the RemoteService class to leverage common remote service functionalities.\n */\nexport class OnchainLobSpotService extends RemoteService {\n  /**\n   * Retrieves the orderbook for a given market.\n   * @param params - The parameters for the orderbook request.\n   * @returns The orderbook data.\n   */\n  async getOrderbook(params: GetOrderbookParams): Promise<OrderbookDto> {\n    const queryParams = new URLSearchParams({\n      market: params.market,\n    });\n    if (params.limit)\n      queryParams.append('limit', params.limit.toString());\n    if (params.aggregation)\n      queryParams.append('aggregation', params.aggregation.toString());\n\n    const queryParamsString = decodeURIComponent(queryParams.toString());\n    const response = await this.fetch<OrderbookDto>(`/orderbook?${queryParamsString}`, 'json');\n\n    return response;\n  }\n\n  /**\n   * Retrieves the orders for a given market.\n   * @param params - The parameters for the orders request.\n   * @returns The orders data.\n   */\n  async getOrders(params: GetOrdersParams): Promise<OrderDto[]> {\n    const queryParams = new URLSearchParams({\n      market: params.market,\n      user: params.user,\n    });\n    if (params.limit)\n      queryParams.append('limit', params.limit.toString());\n    if (params.status) {\n      if (guards.isArray(params.status))\n        params.status.forEach(status => queryParams.append('status', status.toString()));\n      else\n        queryParams.append('status', params.status.toString());\n    }\n\n    const queryParamsString = decodeURIComponent(queryParams.toString());\n    const response = await this.fetch<OrderDto[]>(`/orders?${queryParamsString}`, 'json');\n\n    return response;\n  }\n\n  /**\n   * Retrieves the order history for a given market.\n   * @param params - The parameters for the order history request.\n   * @returns The order history data.\n   */\n  async getOrderHistory(params: GetOrderHistoryParams): Promise<OrderHistoryDto[]> {\n    const queryParams = new URLSearchParams({\n      market: params.market,\n      user: params.user,\n    });\n    if (params.limit)\n      queryParams.append('limit', params.limit.toString());\n\n    const queryParamsString = decodeURIComponent(queryParams.toString());\n    const response = await this.fetch<OrderHistoryDto[]>(`/order-history?${queryParamsString}`, 'json');\n\n    return response;\n  }\n\n  /**\n   * Retrieves the trades for a given market.\n   * @param params - The parameters for the trades request.\n   * @returns The trades data.\n   */\n  async getTrades(params: GetTradesParams): Promise<TradeDto[]> {\n    const queryParams = new URLSearchParams({\n      market: params.market,\n    });\n    if (params.limit)\n      queryParams.append('limit', params.limit.toString());\n\n    const queryParamsString = decodeURIComponent(queryParams.toString());\n    const response = await this.fetch<TradeDto[]>(`/trades?${queryParamsString}`, 'json');\n\n    return response;\n  }\n\n  /**\n   * Retrieves the fills for a given market.\n   * @param params - The parameters for the fills request.\n   * @returns The fills data.\n   */\n  async getFills(params: GetFillsParams): Promise<FillDto[]> {\n    const queryParams = new URLSearchParams({\n      market: params.market,\n      user: params.user,\n    });\n    if (params.limit)\n      queryParams.append('limit', params.limit.toString());\n\n    const queryParamsString = decodeURIComponent(queryParams.toString());\n    const response = await this.fetch<FillDto[]>(`/fills?${queryParamsString}`, 'json');\n\n    return response;\n  }\n\n  /**\n   * Retrieves the tokens for a given market.\n   * @param params - The parameters for the tokens request.\n   * @returns The tokens data.\n   */\n  async getTokens(params: GetTokensParams): Promise<TokenDto[]> {\n    const queryParams = new URLSearchParams();\n    if (params.token)\n      queryParams.append('token', params.token);\n\n    const queryParamsString = decodeURIComponent(queryParams.toString());\n    const response = await this.fetch<TokenDto[]>(`/tokens?${queryParamsString}`, 'json');\n\n    return response;\n  }\n\n  /**\n   * Retrieves the markets for a given market.\n   * @param params - The parameters for the markets request.\n   * @returns The markets data.\n   */\n  async getMarkets(params: GetMarketsParams): Promise<MarketDto[]> {\n    const queryParams = new URLSearchParams();\n    if (params.market && params.market !== ALL_MARKETS_ID)\n      queryParams.append('market', params.market);\n\n    const queryParamsString = decodeURIComponent(queryParams.toString());\n    const response = await this.fetch<MarketDto[]>(`/markets?${queryParamsString}`, 'json');\n\n    return response;\n  }\n\n  /**\n   * Retrieves the candle data for a given market.\n   * @param params - The parameters for the candles request.\n   * @returns The candle data.\n   */\n  async getCandles(params: GetCandlesParams): Promise<CandleDto[]> {\n    const queryParams = new URLSearchParams();\n    queryParams.append('market', params.market);\n    queryParams.append('resolution', params.resolution);\n    if (params.fromTime)\n      queryParams.append('fromTime', params.fromTime.toString());\n    if (params.toTime)\n      queryParams.append('toTime', params.toTime.toString());\n\n    const queryParamsString = decodeURIComponent(queryParams.toString());\n    const response = await this.fetch<CandleDto[]>(`/candles?${queryParamsString}`, 'json');\n\n    return response;\n  }\n\n  /**\n   * Calculates the market order details for a given token inputs.\n   * @param params - The parameters for the market details calculation.\n   * @returns The market order details data.\n   */\n  async calculateMarketDetails(params: CalculateMarketDetailsParams): Promise<MarketDetailsDto> {\n    const queryParams = new URLSearchParams();\n    queryParams.append('market', params.market);\n    queryParams.append('direction', params.direction);\n    queryParams.append('tokenInput', params.inputToken);\n    if (params.inputs.tokenXInput)\n      queryParams.append('tokenXInput', params.inputs.tokenXInput);\n    if (params.inputs.tokenYInput)\n      queryParams.append('tokenYInput', params.inputs.tokenYInput);\n    queryParams.append('slippage', params.inputs.slippage.toString());\n    if (params.inputs.useAutoSlippage)\n      queryParams.append('useAutoSlippage', params.inputs.useAutoSlippage.toString());\n\n    const queryParamsString = decodeURIComponent(queryParams.toString());\n    const response = await this.fetch<MarketDetailsDto>(`calculate/market-details?${queryParamsString}`, 'json');\n\n    return response;\n  }\n\n  /**\n   * Calculates the limit order details for a given token inputs.\n   * @param params - The parameters for the limit details calculation.\n   * @returns The limit order details data.\n   */\n  async calculateLimitDetails(params: CalculateLimitDetailsParams): Promise<LimitDetailsDto> {\n    const queryParams = new URLSearchParams();\n    queryParams.append('market', params.market);\n    queryParams.append('direction', params.direction);\n    queryParams.append('tokenInput', params.inputToken);\n    if (params.inputs.tokenXInput)\n      queryParams.append('tokenXInput', params.inputs.tokenXInput);\n    if (params.inputs.tokenYInput)\n      queryParams.append('tokenYInput', params.inputs.tokenYInput);\n    queryParams.append('postOnly', params.inputs.postOnly.toString());\n    queryParams.append('priceInput', params.inputs.priceInput);\n\n    const queryParamsString = decodeURIComponent(queryParams.toString());\n    const response = await this.fetch<LimitDetailsDto>(`calculate/limit-details?${queryParamsString}`, 'json');\n\n    return response;\n  }\n\n  async getUserBalances(params: GetUserBalancesParams): Promise<UserBalancesDto> {\n    const queryParams = new URLSearchParams();\n    queryParams.append('user', params.user);\n\n    const queryParamsString = decodeURIComponent(queryParams.toString());\n    const response = await this.fetch<UserBalancesDto>(`user-balances?${queryParamsString}`, 'json');\n\n    return response;\n  }\n\n  async getUserDeposits(params: GetUserDepositsParams): Promise<UserDepositsDto> {\n    const queryParams = new URLSearchParams();\n    queryParams.append('user', params.user);\n    if (params.market) queryParams.append('market', params.market);\n\n    const queryParamsString = decodeURIComponent(queryParams.toString());\n    const response = await this.fetch<UserDepositsDto>(`user-deposits?${queryParamsString}`, 'json');\n\n    return response;\n  }\n}\n", "/* eslint-disable @stylistic/indent */\nimport type {\n  CandleUpdateDto,\n  FillUpdateDto,\n  MarketUpdateDto,\n  OrderUpdateDto,\n  OrderHistoryUpdateDto,\n  OrderbookUpdateDto,\n  TradeUpdateDto\n} from './dtos';\nimport type {\n  SubscribeToMarketParams, UnsubscribeFromMarketParams,\n  SubscribeToOrderbookParams, UnsubscribeFromOrderbookParams,\n  SubscribeToTradesParams, UnsubscribeFromTradesParams,\n  SubscribeToUserOrdersParams, UnsubscribeFromUserOrdersParams,\n  SubscribeToUserOrderHistoryParams, UnsubscribeFromUserOrderHistoryParams,\n  SubscribeToUserFillsParams, UnsubscribeFromUserFillsParams,\n  SubscribeToCandlesParams,\n  UnsubscribeFromCandlesParams\n} from './params';\nimport {\n  OnchainLobWebSocketClient, EventEmitter,\n  type OnchainLobWebSocketResponseDto, type PublicEventEmitter, type ToEventEmitter\n} from '../../common';\nimport { getErrorLogMessage } from '../../logging';\nimport { ALL_MARKETS_ID } from '../constants';\n\nconst ALL_MARKETS_CHANNEL = 'allMarkets';\n\ninterface OnchainLobSpotWebSocketServiceEvents {\n  marketUpdated: PublicEventEmitter<readonly [marketId: string, isSnapshot: boolean, data: MarketUpdateDto]>;\n  allMarketsUpdated: PublicEventEmitter<readonly [isSnapshot: boolean, data: MarketUpdateDto[]]>;\n  orderbookUpdated: PublicEventEmitter<readonly [marketId: string, isSnapshot: boolean, data: OrderbookUpdateDto]>;\n  tradesUpdated: PublicEventEmitter<readonly [marketId: string, isSnapshot: boolean, data: TradeUpdateDto[]]>;\n  userOrdersUpdated: PublicEventEmitter<readonly [marketId: string, isSnapshot: boolean, data: OrderUpdateDto[]]>;\n  userOrderHistoryUpdated: PublicEventEmitter<readonly [marketId: string, isSnapshot: boolean, data: OrderHistoryUpdateDto[]]>;\n  userFillsUpdated: PublicEventEmitter<readonly [marketId: string, isSnapshot: boolean, data: FillUpdateDto[]]>;\n  candlesUpdated: PublicEventEmitter<readonly [marketId: string, isSnapshot: boolean, data: CandleUpdateDto]>;\n  subscriptionError: PublicEventEmitter<readonly [error: string]>;\n}\n\n/**\n * OnchainLobSpotWebSocketService provides methods to interact with the Onchain LOB spot market via WebSocket.\n * It allows subscribing and unsubscribing to various market events such as market updates, orderbook updates,\n * trades, user orders, and user fills.\n */\nexport class OnchainLobSpotWebSocketService implements Disposable {\n  /**\n   * Event emitters for various WebSocket events.\n   */\n  readonly events: OnchainLobSpotWebSocketServiceEvents = {\n    subscriptionError: new EventEmitter(),\n    allMarketsUpdated: new EventEmitter(),\n    marketUpdated: new EventEmitter(),\n    orderbookUpdated: new EventEmitter(),\n    tradesUpdated: new EventEmitter(),\n    userOrdersUpdated: new EventEmitter(),\n    userOrderHistoryUpdated: new EventEmitter(),\n    userFillsUpdated: new EventEmitter(),\n    candlesUpdated: new EventEmitter(),\n  };\n\n  /**\n   * The WebSocket client used to communicate with the Onchain LOB spot market.\n   */\n  protected readonly onchainLobWebSocketClient: OnchainLobWebSocketClient;\n\n  /**\n   * Creates an instance of OnchainLobSpotWebSocketService.\n   * @param baseUrl - The base URL for the WebSocket connection.\n   * @param startImmediately - Whether to start the WebSocket client immediately.\n   */\n  constructor(readonly baseUrl: string, startImmediately = true) {\n    this.onchainLobWebSocketClient = new OnchainLobWebSocketClient(baseUrl);\n    this.onchainLobWebSocketClient.events.messageReceived.addListener(this.onSocketMessageReceived);\n    if (startImmediately)\n      this.startOnchainLobWebSocketClientIfNeeded();\n  }\n\n  /**\n   * Subscribes to market updates for a given market.\n   * @param params - The parameters for the market subscription.\n   */\n  subscribeToMarket(params: SubscribeToMarketParams) {\n    this.startOnchainLobWebSocketClientIfNeeded();\n\n    this.onchainLobWebSocketClient.subscribe({\n      channel: 'market',\n      market: params.market,\n    });\n  }\n\n  /**\n   * Unsubscribes from market updates for a given market.\n   * @param params - The parameters for the market unsubscription.\n   */\n  unsubscribeFromMarket(params: UnsubscribeFromMarketParams) {\n    this.onchainLobWebSocketClient.unsubscribe({\n      channel: 'market',\n      market: params.market,\n    });\n  }\n\n  /**\n   * Subscribes to all markets.\n   */\n  subscribeToAllMarkets() {\n    this.startOnchainLobWebSocketClientIfNeeded();\n\n    this.onchainLobWebSocketClient.subscribe({\n      channel: ALL_MARKETS_CHANNEL,\n    });\n  }\n\n  /**\n   * Unsubscribes from all markets.\n   */\n  unsubscribeFromAllMarkets() {\n    this.onchainLobWebSocketClient.unsubscribe({\n      channel: ALL_MARKETS_CHANNEL,\n    });\n  }\n\n  /**\n   * Subscribes to orderbook updates for a given market.\n   * @param params - The parameters for the orderbook subscription.\n   */\n  subscribeToOrderbook(params: SubscribeToOrderbookParams) {\n    this.startOnchainLobWebSocketClientIfNeeded();\n\n    this.onchainLobWebSocketClient.subscribe({\n      channel: 'orderbook',\n      market: params.market,\n      aggregation: params.aggregation,\n    });\n  }\n\n  /**\n   * Unsubscribes from orderbook updates for a given market.\n   * @param params - The parameters for the orderbook unsubscription.\n   */\n  unsubscribeFromOrderbook(params: UnsubscribeFromOrderbookParams) {\n    this.onchainLobWebSocketClient.unsubscribe({\n      channel: 'orderbook',\n      market: params.market,\n      aggregation: params.aggregation,\n    });\n  }\n\n  /**\n   * Subscribes to trade updates for a given market.\n   * @param params - The parameters for the trade subscription.\n   */\n  subscribeToTrades(params: SubscribeToTradesParams) {\n    this.startOnchainLobWebSocketClientIfNeeded();\n\n    this.onchainLobWebSocketClient.subscribe({\n      channel: 'trades',\n      market: params.market,\n    });\n  }\n\n  /**\n   * Unsubscribes from trade updates for a given market.\n   * @param params - The parameters for the trade unsubscription.\n   */\n  unsubscribeFromTrades(params: UnsubscribeFromTradesParams) {\n    this.onchainLobWebSocketClient.unsubscribe({\n      channel: 'trades',\n      market: params.market,\n    });\n  }\n\n  /**\n   * Subscribes to user order updates for a given market and user.\n   * @param params - The parameters for the user order subscription.\n   */\n  subscribeToUserOrders(params: SubscribeToUserOrdersParams) {\n    this.startOnchainLobWebSocketClientIfNeeded();\n\n    this.onchainLobWebSocketClient.subscribe({\n      channel: 'userOrders',\n      user: params.user,\n      market: params.market || ALL_MARKETS_ID,\n    });\n  }\n\n  /**\n   * Unsubscribes from user order updates for a given market and user.\n   * @param params - The parameters for the user order unsubscription.\n   */\n  unsubscribeFromUserOrders(params: UnsubscribeFromUserOrdersParams) {\n    this.onchainLobWebSocketClient.unsubscribe({\n      channel: 'userOrders',\n      user: params.user,\n      market: params.market || ALL_MARKETS_ID,\n    });\n  }\n\n  /**\n   * Subscribes to user order history updates for a given market and user.\n   * @param params - The parameters for the user order history subscription.\n   */\n    subscribeToUserOrderHistory(params: SubscribeToUserOrderHistoryParams) {\n      this.startOnchainLobWebSocketClientIfNeeded();\n\n      this.onchainLobWebSocketClient.subscribe({\n        channel: 'userOrderHistory',\n        user: params.user,\n        market: params.market || ALL_MARKETS_ID,\n      });\n    }\n\n    /**\n     * Unsubscribes from user order history updates for a given market and user.\n     * @param params - The parameters for the user order history unsubscription.\n     */\n    unsubscribeFromUserOrderHistory(params: UnsubscribeFromUserOrderHistoryParams) {\n      this.onchainLobWebSocketClient.unsubscribe({\n        channel: 'userOrderHistory',\n        user: params.user,\n        market: params.market || ALL_MARKETS_ID,\n      });\n    }\n\n  /**\n   * Subscribes to user fill updates for a given market and user.\n   * @param params - The parameters for the user fill subscription.\n   */\n  subscribeToUserFills(params: SubscribeToUserFillsParams) {\n    this.startOnchainLobWebSocketClientIfNeeded();\n\n    this.onchainLobWebSocketClient.subscribe({\n      channel: 'userFills',\n      user: params.user,\n      market: params.market || ALL_MARKETS_ID,\n    });\n  }\n\n  /**\n   * Unsubscribes from user fill updates for a given market and user.\n   * @param params - The parameters for the user fill unsubscription.\n   */\n  unsubscribeFromUserFills(params: UnsubscribeFromUserFillsParams) {\n    this.onchainLobWebSocketClient.unsubscribe({\n      channel: 'userFills',\n      user: params.user,\n      market: params.market || ALL_MARKETS_ID,\n    });\n  }\n\n  /**\n   * Subscribes to candle updates for a given market and resolution.\n   * @param params - The parameters for the candle subscription.\n   */\n  subscribeToCandles(params: SubscribeToCandlesParams) {\n    this.startOnchainLobWebSocketClientIfNeeded();\n\n    this.onchainLobWebSocketClient.subscribe({\n      channel: 'candles',\n      resolution: params.resolution,\n      market: params.market,\n    });\n  }\n\n  /**\n   * Unsubscribes from candle updates for a given market and resolution.\n   * @param params - The parameters for the candle unsubscription.\n   */\n  unsubscribeFromCandles(params: UnsubscribeFromCandlesParams) {\n    this.onchainLobWebSocketClient.unsubscribe({\n      channel: 'candles',\n      resolution: params.resolution,\n      market: params.market,\n    });\n  }\n\n  /**\n   * Disposes the WebSocket client and removes the message listener.\n   */\n  [Symbol.dispose]() {\n    this.onchainLobWebSocketClient.events.messageReceived.removeListener(this.onSocketMessageReceived);\n    this.onchainLobWebSocketClient.stop();\n  }\n\n  /**\n   * Starts the WebSocket client if it is not already started.\n   */\n  protected startOnchainLobWebSocketClientIfNeeded() {\n    this.onchainLobWebSocketClient.start()\n      .catch(error => console.error(`Onchain LOB Web Socket has not been started. Error = ${getErrorLogMessage(error)}`));\n  }\n\n  /**\n   * Handles incoming WebSocket messages and emits the appropriate events.\n   * @param message - The WebSocket message received.\n   */\n  protected readonly onSocketMessageReceived = (message: OnchainLobWebSocketResponseDto) => {\n    try {\n      if (!message.data)\n        return;\n      switch (message.channel) {\n        case ALL_MARKETS_CHANNEL:\n          (this.events.allMarketsUpdated as ToEventEmitter<typeof this.events.allMarketsUpdated>).emit(message.isSnapshot, message.data as MarketUpdateDto[]);\n          break;\n        case 'market':\n          (this.events.marketUpdated as ToEventEmitter<typeof this.events.marketUpdated>).emit(message.id, message.isSnapshot, message.data as MarketUpdateDto);\n          break;\n        case 'orderbook':\n          (this.events.orderbookUpdated as ToEventEmitter<typeof this.events.orderbookUpdated>).emit(message.id, message.isSnapshot, message.data as OrderbookUpdateDto);\n          break;\n        case 'trades':\n          (this.events.tradesUpdated as ToEventEmitter<typeof this.events.tradesUpdated>).emit(message.id, message.isSnapshot, message.data as TradeUpdateDto[]);\n          break;\n        case 'userOrders':\n          (this.events.userOrdersUpdated as ToEventEmitter<typeof this.events.userOrdersUpdated>).emit(message.id, message.isSnapshot, message.data as OrderUpdateDto[]);\n          break;\n        case 'userOrderHistory':\n          (this.events.userOrderHistoryUpdated as ToEventEmitter<typeof this.events.userOrderHistoryUpdated>).emit(message.id, message.isSnapshot, message.data as OrderHistoryUpdateDto[]);\n          break;\n        case 'userFills':\n          (this.events.userFillsUpdated as ToEventEmitter<typeof this.events.userFillsUpdated>).emit(message.id, message.isSnapshot, message.data as FillUpdateDto[]);\n          break;\n        case 'candles':\n          (this.events.candlesUpdated as ToEventEmitter<typeof this.events.candlesUpdated>).emit(message.id, message.isSnapshot, message.data as CandleUpdateDto);\n          break;\n        case 'error':\n          (this.events.subscriptionError as ToEventEmitter<typeof this.events.subscriptionError>).emit(message.data as string);\n          break;\n        case 'subscriptionResponse':\n          break;\n        default:\n          console.warn('Unknown channel in the socket message handler.', message.channel);\n      }\n    }\n    catch (error: unknown) {\n      console.error('Unknown error in the socket message handler.', getErrorLogMessage(error));\n    }\n  };\n}\n", "import BigNumber from 'bignumber.js';\nimport { LimitOrderDetails } from '../models';\nimport { CalculateLimitDetailsSyncParams } from './params';\nimport { max } from 'lodash';\n\nexport const defaultBuyLimitDetails: LimitOrderDetails['buy'] = {\n  maxFee: 0,\n  price: 0,\n  tokenXReceive: 0,\n  maxTokenYPay: 0,\n  minTokenYPay: 0,\n};\n\nexport const defaultSellLimitDetails: LimitOrderDetails['sell'] = {\n  maxFee: 0,\n  price: 0,\n  tokenXPay: 0,\n  maxTokenYReceive: 0,\n  minTokenYReceive: 0,\n};\n\nexport const getLimitDetails = ({ market, direction, inputToken, inputs }: CalculateLimitDetailsSyncParams): LimitOrderDetails => {\n  const { tokenXInput, tokenYInput, priceInput } = inputs;\n  const details: LimitOrderDetails = { buy: defaultBuyLimitDetails, sell: defaultSellLimitDetails };\n\n  if (!Number(priceInput) || !Number(inputToken === 'base' ? tokenXInput : tokenYInput)) {\n    return details;\n  }\n\n  const maxFeeRate\n    = max([\n      market.aggressiveFee + market.passiveOrderPayout,\n      market.passiveFee,\n    ]) || 0;\n\n  if (direction === 'buy') {\n    if (inputToken === 'base') {\n      details.buy = calculateBuyLimitDetailsTokenXInput(\n        Number(priceInput),\n        Number(tokenXInput),\n        market.priceScalingFactor,\n        market.tokenXScalingFactor,\n        market.tokenYScalingFactor,\n        maxFeeRate\n      );\n    }\n    else {\n      details.buy = calculateBuyLimitDetailsTokenYInput(\n        Number(priceInput),\n        Number(tokenYInput),\n        market.priceScalingFactor,\n        market.tokenXScalingFactor,\n        market.tokenYScalingFactor,\n        maxFeeRate\n      );\n    }\n  }\n  else {\n    if (inputToken === 'base') {\n      details.sell = calculateSellLimitDetailsTokenXInput(\n        Number(priceInput),\n        Number(tokenXInput),\n        market.priceScalingFactor,\n        market.tokenXScalingFactor,\n        market.tokenYScalingFactor,\n        maxFeeRate\n      );\n    }\n    else {\n      details.sell = calculateSellLimitDetailsTokenYInput(\n        Number(priceInput),\n        Number(tokenYInput),\n        market.priceScalingFactor,\n        market.tokenXScalingFactor,\n        market.tokenYScalingFactor,\n        maxFeeRate\n      );\n    }\n  }\n\n  return details;\n};\n\nexport const calculateBuyLimitDetailsTokenXInput = (\n  priceInput: number,\n  tokenXInput: number,\n  priceScalingFactor: number,\n  tokenXScalingFactor: number,\n  tokenYScalingFactor: number,\n  maxFeeRate: number\n): LimitOrderDetails['buy'] => {\n  const price = new BigNumber(priceInput).dp(priceScalingFactor, BigNumber.ROUND_DOWN);\n  const tokenXReceive = new BigNumber(tokenXInput).dp(tokenXScalingFactor, BigNumber.ROUND_DOWN);\n  const minTokenYPay = price.times(tokenXReceive).dp(tokenYScalingFactor, BigNumber.ROUND_CEIL);\n  const maxFee = minTokenYPay.times(maxFeeRate).dp(tokenXScalingFactor + priceScalingFactor, BigNumber.ROUND_CEIL);\n  const maxTokenYPay = minTokenYPay.plus(maxFee).dp(tokenYScalingFactor, BigNumber.ROUND_CEIL);\n\n  return {\n    price: price.toNumber(),\n    maxFee: maxFee.toNumber(),\n    tokenXReceive: tokenXReceive.toNumber(),\n    maxTokenYPay: maxTokenYPay.toNumber(),\n    minTokenYPay: minTokenYPay.toNumber(),\n  };\n};\n\nexport const calculateBuyLimitDetailsTokenYInput = (\n  priceInput: number,\n  tokenYInput: number,\n  priceScalingFactor: number,\n  tokenXScalingFactor: number,\n  tokenYScalingFactor: number,\n  maxFeeRate: number\n): LimitOrderDetails['buy'] => {\n  const price = new BigNumber(priceInput).dp(priceScalingFactor, BigNumber.ROUND_DOWN);\n  const maxTokenYPay = new BigNumber(tokenYInput).dp(tokenYScalingFactor, BigNumber.ROUND_FLOOR);\n  const minTokenYPay = maxTokenYPay\n    .div(new BigNumber(1).plus(maxFeeRate))\n    .dp(tokenYScalingFactor, BigNumber.ROUND_CEIL);\n  const tokenXReceive = minTokenYPay.div(price).dp(tokenXScalingFactor, BigNumber.ROUND_DOWN);\n  const maxFee = minTokenYPay.times(maxFeeRate).dp(tokenXScalingFactor + priceScalingFactor, BigNumber.ROUND_CEIL);\n\n  return {\n    price: price.toNumber(),\n    maxFee: maxFee.toNumber(),\n    tokenXReceive: tokenXReceive.toNumber(),\n    maxTokenYPay: maxTokenYPay.toNumber(),\n    minTokenYPay: minTokenYPay.toNumber(),\n  };\n};\n\nexport const calculateSellLimitDetailsTokenXInput = (\n  priceInput: number,\n  tokenXInput: number,\n  priceScalingFactor: number,\n  tokenXScalingFactor: number,\n  tokenYScalingFactor: number,\n  maxFeeRate: number\n): LimitOrderDetails['sell'] => {\n  const price = new BigNumber(priceInput).dp(priceScalingFactor, BigNumber.ROUND_DOWN);\n  const tokenXPay = new BigNumber(tokenXInput).dp(tokenXScalingFactor, BigNumber.ROUND_DOWN);\n  const maxTokenYReceive = price.times(tokenXPay).dp(tokenYScalingFactor, BigNumber.ROUND_FLOOR);\n  const maxFee = maxTokenYReceive.times(maxFeeRate).dp(tokenXScalingFactor + priceScalingFactor, BigNumber.ROUND_CEIL);\n  const minTokenYReceive = maxTokenYReceive.minus(maxFee).dp(tokenYScalingFactor, BigNumber.ROUND_FLOOR);\n\n  return {\n    price: price.toNumber(),\n    maxFee: maxFee.toNumber(),\n    tokenXPay: tokenXPay.toNumber(),\n    maxTokenYReceive: maxTokenYReceive.toNumber(),\n    minTokenYReceive: minTokenYReceive.toNumber(),\n  };\n};\n\nexport const calculateSellLimitDetailsTokenYInput = (\n  priceInput: number,\n  tokenYInput: number,\n  priceScalingFactor: number,\n  tokenXScalingFactor: number,\n  tokenYScalingFactor: number,\n  maxFeeRate: number\n): LimitOrderDetails['sell'] => {\n  const price = new BigNumber(priceInput).dp(priceScalingFactor, BigNumber.ROUND_DOWN);\n  const minTokenYReceive = new BigNumber(tokenYInput).dp(tokenYScalingFactor, BigNumber.ROUND_DOWN);\n  const maxTokenYReceive = minTokenYReceive\n    .div(new BigNumber(1).minus(maxFeeRate))\n    .dp(tokenYScalingFactor, BigNumber.ROUND_FLOOR);\n  const tokenXPay = maxTokenYReceive.div(price).dp(tokenXScalingFactor, BigNumber.ROUND_UP);\n  const maxFee = maxTokenYReceive.times(maxFeeRate).dp(tokenXScalingFactor + priceScalingFactor, BigNumber.ROUND_CEIL);\n\n  return {\n    price: price.toNumber(),\n    maxFee: maxFee.toNumber(),\n    tokenXPay: tokenXPay.toNumber(),\n    maxTokenYReceive: maxTokenYReceive.toNumber(),\n    minTokenYReceive: minTokenYReceive.toNumber(),\n  };\n};\n", "import BigNumber from 'bignumber.js';\nimport { MarketOrderDetails, OrderbookLevel } from '../models';\nimport { CalculateMarketDetailsSyncParams } from './params';\nimport { ceil, floor } from 'lodash';\n\nexport const defaultBuyMarketDetails: MarketOrderDetails['buy'] = {\n  fee: 0,\n  estFee: 0,\n  worstPrice: 0,\n  estPrice: 0,\n  estWorstPrice: 0,\n  estSlippage: 0,\n  autoSlippage: 0,\n  tokenXReceive: 0,\n  estTokenXReceive: 0,\n  tokenYPay: 0,\n  estTokenYPay: 0,\n};\n\nexport const defaultSellMarketDetails: MarketOrderDetails['sell'] = {\n  fee: 0,\n  estFee: 0,\n  worstPrice: 0,\n  estPrice: 0,\n  estWorstPrice: 0,\n  estSlippage: 0,\n  autoSlippage: 0,\n  tokenXPay: 0,\n  estTokenXPay: 0,\n  tokenYReceive: 0,\n  estTokenYReceive: 0,\n};\n\nconst AUTO_SLIPPAGE_INCREASE_PERCENT = 10;\nconst AUTO_SLIPPAGE_DECIMAL = 1;\nconst AUTO_SLIPPAGE_MAX_PERCENT = 5;\n\nexport const getMarketDetails = ({ market, orderbook, inputToken, inputs, direction }: CalculateMarketDetailsSyncParams): MarketOrderDetails => {\n  const { tokenXInput, tokenYInput, slippage, useAutoSlippage = false } = inputs;\n  const details: MarketOrderDetails = { buy: defaultBuyMarketDetails, sell: defaultSellMarketDetails };\n\n  if (!market.bestAsk || !market.bestBid) {\n    return details;\n  }\n\n  if (!Number(inputToken === 'base' ? tokenXInput : tokenYInput)) {\n    return details;\n  }\n\n  const feeRate = market.aggressiveFee + market.passiveOrderPayout;\n\n  if (direction === 'buy') {\n    if (inputToken === 'base') {\n      details.buy = calculateBuyMarketDetailsTokenXInput(\n        Number(tokenXInput),\n        slippage,\n        market.bestAsk.toNumber(),\n        orderbook.asks.sort((a, b) => Number(a.rawPrice - b.rawPrice)),\n        market.tokenXScalingFactor,\n        market.tokenYScalingFactor,\n        market.priceScalingFactor,\n        feeRate,\n        useAutoSlippage\n      );\n    }\n    else {\n      details.buy = calculateBuyMarketDetailsTokenYInput(\n        Number(tokenYInput),\n        slippage,\n        market.bestAsk.toNumber(),\n        orderbook.asks.sort((a, b) => Number(a.rawPrice - b.rawPrice)),\n        market.tokenXScalingFactor,\n        market.tokenYScalingFactor,\n        market.priceScalingFactor,\n        feeRate,\n        useAutoSlippage\n      );\n    }\n  }\n  else {\n    if (inputToken === 'base') {\n      details.sell = calculateSellMarketDetailsTokenXInput(\n        Number(tokenXInput),\n        slippage,\n        market.bestBid.toNumber(),\n        orderbook.bids.sort((a, b) => Number(b.rawPrice - a.rawPrice)),\n        market.tokenXScalingFactor,\n        market.tokenYScalingFactor,\n        market.priceScalingFactor,\n        feeRate,\n        useAutoSlippage\n      );\n    }\n    else {\n      details.sell = calculateSellMarketDetailsTokenYInput(\n        Number(tokenYInput),\n        slippage,\n        market.bestBid.toNumber(),\n        orderbook.bids.sort((a, b) => Number(b.rawPrice - a.rawPrice)),\n        market.tokenXScalingFactor,\n        market.tokenYScalingFactor,\n        market.priceScalingFactor,\n        feeRate,\n        useAutoSlippage\n      );\n    }\n  }\n\n  return details;\n};\n\nexport const calculateBuyMarketDetailsTokenXInput = (\n  tokenXInput: number,\n  maxSlippage: number,\n  bestAsk: number,\n  orderbookSide: OrderbookLevel[],\n  tokenXScalingFactor: number,\n  tokenYScalingFactor: number,\n  priceScalingFactor: number,\n  feeRate: number,\n  useAutoSlippage: boolean\n): MarketOrderDetails['buy'] => {\n  let autoSlippage = 0;\n  let slippage = maxSlippage;\n\n  const tokenXReceive = new BigNumber(tokenXInput).dp(tokenXScalingFactor, BigNumber.ROUND_FLOOR);\n\n  const { estPrice, estTokenYAmount, estWorstPrice, estSlippage } = calculateEstValuesFromTokenX(\n    tokenXReceive.toNumber(),\n    orderbookSide,\n    bestAsk\n  );\n\n  if (useAutoSlippage) {\n    autoSlippage = calculateAutoSlippage(estSlippage);\n    slippage = autoSlippage;\n  }\n\n  const worstPrice = new BigNumber(bestAsk)\n    .times(new BigNumber(1).plus(new BigNumber(slippage).div(100)))\n    .dp(priceScalingFactor, BigNumber.ROUND_CEIL);\n  const tokenYPayWithoutFee = tokenXReceive.times(worstPrice).dp(tokenYScalingFactor, BigNumber.ROUND_CEIL);\n  const [tokenYPay, fee] = calculateValueWithFee(\n    tokenYPayWithoutFee,\n    feeRate,\n    tokenXScalingFactor + priceScalingFactor,\n    tokenYScalingFactor\n  );\n\n  const [estTokenYPay, estFee] = calculateValueWithFee(\n    new BigNumber(estTokenYAmount),\n    feeRate,\n    tokenXScalingFactor + priceScalingFactor,\n    tokenYScalingFactor\n  );\n\n  return {\n    fee: fee.toNumber(),\n    estFee: estFee.toNumber(),\n    worstPrice: worstPrice.toNumber(),\n    estPrice: ceil(estPrice, priceScalingFactor),\n    estWorstPrice: ceil(estWorstPrice, priceScalingFactor),\n    estSlippage,\n    autoSlippage,\n\n    tokenXReceive: tokenXReceive.toNumber(),\n    estTokenXReceive: tokenXReceive.toNumber(),\n    tokenYPay: tokenYPay.toNumber(),\n    estTokenYPay: estTokenYPay.toNumber(),\n  };\n};\n\nexport const calculateBuyMarketDetailsTokenYInput = (\n  tokenYInput: number,\n  maxSlippage: number,\n  bestAsk: number,\n  orderbookSide: OrderbookLevel[],\n  tokenXScalingFactor: number,\n  tokenYScalingFactor: number,\n  priceScalingFactor: number,\n  feeRate: number,\n  useAutoSlippage: boolean\n): MarketOrderDetails['buy'] => {\n  let autoSlippage = 0;\n  let slippage = maxSlippage;\n\n  const tokenYPay = new BigNumber(tokenYInput).dp(tokenYScalingFactor, BigNumber.ROUND_FLOOR);\n  const [tokenYWithoutFee, fee] = calculateValueAfterFee(\n    tokenYPay,\n    feeRate,\n    tokenXScalingFactor + priceScalingFactor,\n    tokenYScalingFactor\n  );\n\n  const { estPrice, estSlippage, estTokenXAmount, estWorstPrice } = calculateEstValuesFromTokenY(\n    tokenYWithoutFee.toNumber(),\n    orderbookSide,\n    bestAsk\n  );\n\n  if (useAutoSlippage) {\n    autoSlippage = calculateAutoSlippage(estSlippage);\n    slippage = autoSlippage;\n  }\n\n  const worstPrice = new BigNumber(bestAsk)\n    .times(new BigNumber(1).plus(new BigNumber(slippage).div(100)))\n    .dp(priceScalingFactor, BigNumber.ROUND_CEIL);\n\n  const tokenXReceive = tokenYWithoutFee.div(worstPrice).dp(tokenXScalingFactor, BigNumber.ROUND_FLOOR);\n\n  const estTokenXReceive = new BigNumber(estTokenXAmount).dp(tokenXScalingFactor, BigNumber.ROUND_FLOOR);\n\n  return {\n    fee: fee.toNumber(),\n    estFee: fee.toNumber(),\n    worstPrice: worstPrice.toNumber(),\n    estPrice: ceil(estPrice, priceScalingFactor),\n    estWorstPrice: ceil(estWorstPrice, priceScalingFactor),\n    estSlippage,\n    autoSlippage,\n\n    tokenXReceive: tokenXReceive.toNumber(),\n    estTokenXReceive: estTokenXReceive.toNumber(),\n    tokenYPay: tokenYPay.toNumber(),\n    estTokenYPay: tokenYPay.toNumber(),\n  };\n};\n\nexport const calculateSellMarketDetailsTokenXInput = (\n  tokenXInput: number,\n  maxSlippage: number,\n  bestBid: number,\n  orderbookSide: OrderbookLevel[],\n  tokenXScalingFactor: number,\n  tokenYScalingFactor: number,\n  priceScalingFactor: number,\n  feeRate: number,\n  useAutoSlippage: boolean\n): MarketOrderDetails['sell'] => {\n  let autoSlippage = 0;\n  let slippage = maxSlippage;\n\n  const tokenXPay = new BigNumber(tokenXInput).dp(tokenXScalingFactor, BigNumber.ROUND_FLOOR);\n\n  const { estPrice, estSlippage, estTokenYAmount, estWorstPrice } = calculateEstValuesFromTokenX(\n    tokenXPay.toNumber(),\n    orderbookSide,\n    bestBid\n  );\n\n  if (useAutoSlippage) {\n    autoSlippage = calculateAutoSlippage(estSlippage);\n    slippage = autoSlippage;\n  }\n\n  const worstPrice = new BigNumber(bestBid)\n    .times(new BigNumber(1).minus(new BigNumber(slippage).div(100)))\n    .dp(priceScalingFactor, BigNumber.ROUND_FLOOR);\n  const tokenYReceive = tokenXPay.times(worstPrice).dp(tokenYScalingFactor, BigNumber.ROUND_FLOOR);\n  const [tokenYReceiveWithoutFee, fee] = calculateValueAfterFee(\n    tokenYReceive,\n    feeRate,\n    tokenXScalingFactor + priceScalingFactor,\n    tokenYScalingFactor\n  );\n\n  const [estTokenYReceiveWithoutFee, estFee] = calculateValueAfterFee(\n    new BigNumber(estTokenYAmount),\n    feeRate,\n    tokenXScalingFactor + priceScalingFactor,\n    tokenYScalingFactor\n  );\n\n  return {\n    fee: fee.toNumber(),\n    estFee: estFee.toNumber(),\n    worstPrice: worstPrice.toNumber(),\n    estPrice: floor(estPrice, priceScalingFactor),\n    estWorstPrice: floor(estWorstPrice, priceScalingFactor),\n    estSlippage,\n    autoSlippage,\n\n    tokenXPay: tokenXPay.toNumber(),\n    estTokenXPay: tokenXPay.toNumber(),\n    tokenYReceive: tokenYReceiveWithoutFee.toNumber(),\n    estTokenYReceive: estTokenYReceiveWithoutFee.toNumber(),\n  };\n};\n\nexport const calculateSellMarketDetailsTokenYInput = (\n  tokenYInput: number,\n  maxSlippage: number,\n  bestBid: number,\n  orderbookSide: OrderbookLevel[],\n  tokenXScalingFactor: number,\n  tokenYScalingFactor: number,\n  priceScalingFactor: number,\n  feeRate: number,\n  useAutoSlippage: boolean\n): MarketOrderDetails['sell'] => {\n  let autoSlippage = 0;\n  let slippage = maxSlippage;\n\n  const tokenYReceive = new BigNumber(tokenYInput).dp(tokenYScalingFactor, BigNumber.ROUND_FLOOR);\n\n  const [tokenYReceiveBeforeFee, fee] = calculateValueBeforeFee(\n    tokenYReceive,\n    feeRate,\n    tokenXScalingFactor + priceScalingFactor,\n    tokenYScalingFactor\n  );\n\n  const { estPrice, estTokenXAmount, estSlippage, estWorstPrice } = calculateEstValuesFromTokenY(\n    tokenYReceiveBeforeFee.toNumber(),\n    orderbookSide,\n    bestBid\n  );\n\n  if (useAutoSlippage) {\n    autoSlippage = calculateAutoSlippage(estSlippage);\n    slippage = autoSlippage;\n  }\n\n  const worstPrice = new BigNumber(bestBid)\n    .times(new BigNumber(1).minus(new BigNumber(slippage).div(100)))\n    .dp(priceScalingFactor, BigNumber.ROUND_FLOOR);\n\n  const tokenXPay = tokenYReceiveBeforeFee.div(worstPrice).dp(tokenXScalingFactor, BigNumber.ROUND_CEIL);\n  const estTokenXPay = new BigNumber(estTokenXAmount).dp(tokenXScalingFactor, BigNumber.ROUND_CEIL);\n\n  return {\n    fee: fee.toNumber(),\n    estFee: fee.toNumber(),\n    worstPrice: worstPrice.toNumber(),\n    estPrice: floor(estPrice, priceScalingFactor),\n    estWorstPrice: floor(estWorstPrice, priceScalingFactor),\n    estSlippage,\n    autoSlippage,\n\n    tokenXPay: tokenXPay.toNumber(),\n    estTokenXPay: estTokenXPay.toNumber(),\n    tokenYReceive: tokenYReceive.toNumber(),\n    estTokenYReceive: tokenYReceive.toNumber(),\n  };\n};\n\nexport const calculateEstValuesFromTokenX = (tokenX: number, orderbookSide: OrderbookLevel[], initialPrice: number) => {\n  let totalCost = new BigNumber(0);\n  let tokenXLeft = new BigNumber(tokenX);\n  let estWorstPrice = new BigNumber(0);\n\n  for (const level of orderbookSide) {\n    const price = new BigNumber(level.price);\n    const size = new BigNumber(level.size);\n    const tradeQuantity = BigNumber.min(tokenXLeft, size);\n    totalCost = totalCost.plus(tradeQuantity.times(price));\n    tokenXLeft = tokenXLeft.minus(tradeQuantity);\n    estWorstPrice = price;\n\n    if (tokenXLeft.lte(0)) break;\n  }\n\n  const estPrice = totalCost.div(new BigNumber(tokenX).minus(tokenXLeft));\n  const estSlippage = estWorstPrice.minus(initialPrice).div(initialPrice).abs().times(100);\n  const estTokenYAmount = totalCost;\n\n  return {\n    estPrice: estPrice.toNumber(),\n    estSlippage: estSlippage.toNumber(),\n    estTokenYAmount: estTokenYAmount.toNumber(),\n    estWorstPrice: estWorstPrice.toNumber(),\n  };\n};\n\nexport const calculateEstValuesFromTokenY = (tokenY: number, orderbookSide: OrderbookLevel[], initialPrice: number) => {\n  let totalQuantity = new BigNumber(0);\n  let tokenYLeft = new BigNumber(tokenY);\n  let estWorstPrice = new BigNumber(0);\n\n  for (const level of orderbookSide) {\n    const price = new BigNumber(level.price);\n    const size = new BigNumber(level.size);\n    const tradeCost = BigNumber.min(tokenYLeft, size.times(price));\n    totalQuantity = totalQuantity.plus(tradeCost.div(price));\n    tokenYLeft = tokenYLeft.minus(tradeCost);\n    estWorstPrice = price;\n\n    if (tokenYLeft.lte(0)) break;\n  }\n\n  const estPrice = new BigNumber(tokenY).minus(tokenYLeft).div(totalQuantity);\n  const estSlippage = estWorstPrice.minus(initialPrice).div(initialPrice).abs().times(100);\n  const estTokenXAmount = totalQuantity;\n\n  return {\n    estPrice: estPrice.toNumber(),\n    estSlippage: estSlippage.toNumber(),\n    estTokenXAmount: estTokenXAmount.toNumber(),\n    estWorstPrice: estWorstPrice.toNumber(),\n  };\n};\n\nexport const calculateValueWithFee = (\n  value: BigNumber,\n  feeRate: number,\n  feeDecimalPlaces: number,\n  valueDecimalPlaces: number\n): [BigNumber, BigNumber] => {\n  const fee = value.times(feeRate).dp(feeDecimalPlaces, BigNumber.ROUND_CEIL);\n  const valueWithFee = value.plus(fee).dp(valueDecimalPlaces, BigNumber.ROUND_CEIL);\n  return [valueWithFee, fee];\n};\n\nexport const calculateValueAfterFee = (\n  value: BigNumber,\n  feeRate: number,\n  feeDecimalPlaces: number,\n  valueDecimalPlaces: number\n): [BigNumber, BigNumber] => {\n  const fee = value.times(feeRate).dp(feeDecimalPlaces, BigNumber.ROUND_CEIL);\n  const valueAfterFee = value.minus(fee).dp(valueDecimalPlaces, BigNumber.ROUND_FLOOR);\n  return [valueAfterFee, fee];\n};\n\nexport const calculateValueBeforeFee = (\n  value: BigNumber,\n  feeRate: number,\n  feeDecimalPlaces: number,\n  valueDecimalPlaces: number\n): [BigNumber, BigNumber] => {\n  const valueBeforeFee = value.div(new BigNumber(1).minus(feeRate)).dp(valueDecimalPlaces, BigNumber.ROUND_CEIL);\n  const fee = valueBeforeFee.minus(value).dp(feeDecimalPlaces, BigNumber.ROUND_CEIL);\n  return [valueBeforeFee, fee];\n};\n\nconst calculateAutoSlippage = (estSlippage: number) => {\n  const diff = new BigNumber(estSlippage).times(new BigNumber(AUTO_SLIPPAGE_INCREASE_PERCENT).div(100));\n  const autoSlippage = new BigNumber(estSlippage).plus(diff).dp(AUTO_SLIPPAGE_DECIMAL, BigNumber.ROUND_CEIL);\n  if (autoSlippage.isZero()) {\n    return 0.1;\n  }\n\n  return autoSlippage.gt(AUTO_SLIPPAGE_MAX_PERCENT) ? AUTO_SLIPPAGE_MAX_PERCENT : autoSlippage.toNumber();\n};\n", "import type { ContractTransactionResponse } from 'ethers';\nimport type { Signer } from 'ethers/providers';\n\nimport { OnchainLobSpotMarketContract } from './onchainLobSpotMarketContract';\nimport * as mappers from './mappers';\nimport type {\n  ApproveSpotParams,\n  BatchChangeOrderSpotParams,\n  BatchClaimOrderSpotParams,\n  BatchPlaceOrderSpotParams,\n  ChangeOrderSpotParams,\n  ClaimOrderSpotParams,\n  DepositSpotParams,\n  GetFillsParams,\n  GetMarketParams,\n  GetMarketsParams,\n  GetOrderbookParams,\n  GetOrdersParams,\n  GetTokensParams,\n  GetTradesParams,\n  GetCandlesParams,\n  PlaceOrderSpotParams,\n  SetClaimableStatusParams,\n  SubscribeToMarketParams,\n  SubscribeToOrderbookParams,\n  SubscribeToTradesParams,\n  SubscribeToUserFillsParams,\n  SubscribeToUserOrdersParams,\n  UnsubscribeFromMarketParams,\n  UnsubscribeFromOrderbookParams,\n  UnsubscribeFromTradesParams,\n  UnsubscribeFromUserFillsParams,\n  UnsubscribeFromUserOrdersParams,\n  WithdrawSpotParams,\n  SubscribeToCandlesParams,\n  UnsubscribeFromCandlesParams,\n  CalculateLimitDetailsParams,\n  CalculateMarketDetailsParams,\n  GetUserBalancesParams,\n  PlaceOrderWithPermitSpotParams,\n  PlaceMarketOrderWithTargetValueParams,\n  PlaceMarketOrderWithTargetValueWithPermitParams,\n  GetOrderHistoryParams,\n  UnsubscribeFromUserOrderHistoryParams,\n  SubscribeToUserOrderHistoryParams,\n  CalculateLimitDetailsSyncParams,\n  CalculateMarketDetailsSyncParams,\n  GetUserDepositsParams,\n  WrapNativeTokenSpotParams,\n  UnwrapNativeTokenSpotParams\n} from './params';\nimport { EventEmitter, type PublicEventEmitter, type ToEventEmitter } from '../common';\nimport { getErrorLogMessage } from '../logging';\nimport type { Market, FillUpdate, MarketUpdate, OrderUpdate, OrderbookUpdate, TradeUpdate, Orderbook, Order, Trade, Fill, Token, Candle, CandleUpdate, MarketOrderDetails, LimitOrderDetails, UserBalances, OrderHistoryUpdate, OrderHistory, UserDeposits } from '../models';\nimport { OnchainLobSpotService, OnchainLobSpotWebSocketService } from '../services';\nimport { ALL_MARKETS_ID } from '../services/constants';\nimport { getLimitDetails } from './limitDetails';\nimport { getMarketDetails } from './marketDetails';\n\n/**\n * Options for configuring the OnchainLobSpot instance.\n *\n * @interface OnchainLobSpotOptions\n */\nexport interface OnchainLobSpotOptions {\n  /**\n   * The base URL for the Onchain LOB API.\n   *\n   * @type {string}\n   */\n  apiBaseUrl: string;\n\n  /**\n   * The base URL for the Onchain LOB WebSocket API.\n   *\n   * @type {string}\n   */\n  webSocketApiBaseUrl: string;\n\n  /**\n   * The ethers signer used for signing transactions.\n   * For only http/ws operations, you can set this to null.\n   *\n   * @type {Signer | null}\n   */\n  signer: Signer | null;\n\n  /**\n   * Whether to connect to the WebSocket immediately after creating the OnchainLobSpot (true)\n   * or when the first subscription is called (false).\n   * By default, the WebSocket is connected immediately.\n   *\n   * @type {boolean}\n   * @optional\n   */\n  webSocketConnectImmediately?: boolean;\n\n  /**\n   * Whether to enable the transfer of executed tokens.\n   *\n   * @type {boolean}\n   * @optional\n   */\n  transferExecutedTokensEnabled?: boolean;\n\n  /**\n   * Whether to automatically wait for transactions to be confirmed.\n   *\n   * @type {boolean}\n   * @optional\n   */\n  autoWaitTransaction?: boolean;\n\n  /**\n   * Whether to use a fast algorithm for waiting for transaction to be confirmed.\n   *\n   * @type {boolean}\n   * @optional\n   */\n  fastWaitTransaction?: boolean;\n\n  /**\n   * Interval between requests in milliseconds when using a fast algorithm for waiting for transaction confirmations.\n   *\n   * @type {number}\n   * @optional\n   */\n  fastWaitTransactionInterval?: number;\n\n  /**\n   * Timeout in milliseconds when using a fast algorithm for waiting for transaction confirmations.\n   *\n   * @type {number}\n   * @optional\n   */\n  fastWaitTransactionTimeout?: number;\n}\n\n/**\n * Events are emitted when data related to subscriptions is updated.\n */\ninterface OnchainLobSpotEvents {\n  /**\n   * Emitted when some markets' data is updated.\n   * @event\n   * @type {PublicEventEmitter<readonly [isSnapshot: boolean, data: MarketUpdate[]]>}\n   */\n  allMarketUpdated: PublicEventEmitter<readonly [isSnapshot: boolean, data: MarketUpdate[]]>;\n\n  /**\n   * Emitted when a market's data is updated.\n   * @event\n   * @type {PublicEventEmitter<readonly [marketId: string, isSnapshot: boolean, data: MarketUpdate]>}\n   */\n  marketUpdated: PublicEventEmitter<readonly [marketId: string, isSnapshot: boolean, data: MarketUpdate]>;\n\n  /**\n   * Emitted when a market's orderbook is updated.\n   * @event\n   * @type {PublicEventEmitter<readonly [marketId: string, isSnapshot: boolean, data: OrderbookUpdate]>}\n   */\n  orderbookUpdated: PublicEventEmitter<readonly [marketId: string, isSnapshot: boolean, data: OrderbookUpdate]>;\n\n  /**\n   * Emitted when a market's trades are updated.\n   * @event\n   * @type {PublicEventEmitter<readonly [marketId: string, isSnapshot: boolean, data: TradeUpdate[]]>}\n   */\n  tradesUpdated: PublicEventEmitter<readonly [marketId: string, isSnapshot: boolean, data: TradeUpdate[]]>;\n\n  /**\n   * Emitted when a user's orders are updated.\n   * @event\n   * @type {PublicEventEmitter<readonly [marketId: string, isSnapshot: boolean, data: OrderUpdate[]]>}\n   */\n  userOrdersUpdated: PublicEventEmitter<readonly [marketId: string, isSnapshot: boolean, data: OrderUpdate[]]>;\n\n  /**\n   * Emitted when a user's order history is updated.\n   * @event\n   * @type {PublicEventEmitter<readonly [marketId: string, isSnapshot: boolean, data: OrderHistoryUpdate[]]>}\n   */\n  userOrderHistoryUpdated: PublicEventEmitter<readonly [marketId: string, isSnapshot: boolean, data: OrderHistoryUpdate[]]>;\n\n  /**\n   * Emitted when a user's fills are updated.\n   * @event\n   * @type {PublicEventEmitter<readonly [marketId: string, isSnapshot: boolean, data: FillUpdate[]]>}\n   */\n  userFillsUpdated: PublicEventEmitter<readonly [marketId: string, isSnapshot: boolean, data: FillUpdate[]]>;\n\n  /**\n   * Emitted when a market's candle is updated.\n   * @event\n   * @type {PublicEventEmitter<readonly [marketId: string, isSnapshot: boolean, data: CandleUpdate[]]>}\n   */\n  candlesUpdated: PublicEventEmitter<readonly [marketId: string, isSnapshot: boolean, data: CandleUpdate]>;\n\n  /**\n   * Emitted when there is an error related to a subscription.\n   * @event\n   * @type {PublicEventEmitter<readonly [error: string]>}\n   */\n  subscriptionError: PublicEventEmitter<readonly [error: string]>;\n}\n\n/**\n * The OnchainLobSpot is a class for interacting with the Onchain LOB Spot API.\n * It provides methods for retrieving market information, subscribing to market updates,\n * placing orders, managing user orders and fills, and and more.\n * Use the {@link OnchainLobClient#events} property to handle subscription events.\n */\nexport class OnchainLobSpot implements Disposable {\n  /**\n   * The events related to user subscriptions.\n   *\n   * These events are emitted when data is updated related to subscriptions.\n   */\n  readonly events: OnchainLobSpotEvents = {\n    subscriptionError: new EventEmitter(),\n    marketUpdated: new EventEmitter(),\n    orderbookUpdated: new EventEmitter(),\n    tradesUpdated: new EventEmitter(),\n    userOrdersUpdated: new EventEmitter(),\n    userOrderHistoryUpdated: new EventEmitter(),\n    userFillsUpdated: new EventEmitter(),\n    candlesUpdated: new EventEmitter(),\n    allMarketUpdated: new EventEmitter(),\n  };\n\n  /**\n   * Indicates whether executed tokens should be transferred to the wallet or credited to the balance.\n   * When true, executed tokens will be transferred to the wallet. When false, executed tokens will be credited to the balance.\n   * If not set, the default value will be used.\n   * This flag is used by the Onchain LOB Spot contract.\n   */\n  transferExecutedTokensEnabled: boolean | undefined;\n  /**\n   * Indicates whether transactions should be automatically waited for by the client.\n   * When true, transactions will be automatically waited for by the client until confirmation is received.\n   * When false, transactions will not be waited for by the client.\n   * If not set, the default value will be used.\n   * This flag is used by the Onchain LOB Spot contract.\n   *\n   * Note: \"Wait\" means that the client will wait until the transaction confirmation is received.\n   */\n  autoWaitTransaction: boolean | undefined;\n\n  protected signer: Signer | null;\n  protected readonly onchainLobService: OnchainLobSpotService;\n  protected readonly onchainLobWebSocketService: OnchainLobSpotWebSocketService;\n  private marketContracts: Map<string, OnchainLobSpotMarketContract> = new Map();\n  protected readonly cachedMarkets: Map<string, Market> = new Map();\n  protected readonly mappers: typeof mappers;\n  private cachedMarketsPromise: Promise<Market[]> | undefined = undefined;\n\n  constructor(options: Readonly<OnchainLobSpotOptions>) {\n    this.signer = options.signer;\n    this.transferExecutedTokensEnabled = options.transferExecutedTokensEnabled;\n    this.autoWaitTransaction = options.autoWaitTransaction;\n    this.onchainLobService = new OnchainLobSpotService(options.apiBaseUrl);\n    this.onchainLobWebSocketService = new OnchainLobSpotWebSocketService(options.webSocketApiBaseUrl, options.webSocketConnectImmediately);\n    this.mappers = mappers;\n\n    this.attachEvents();\n  }\n\n  /**\n   * Sets a new signer for the OnchainLobSpot instance.\n   *\n   * @param {Signer | null} signer - The new signer to be set. For only http/ws operations, you can set this to null.\n   * @returns {OnchainLobSpot} Returns the OnchainLobSpot instance for method chaining.\n   */\n  setSigner(signer: Signer | null): OnchainLobSpot {\n    this.signer = signer;\n    this.marketContracts = new Map();\n    return this;\n  }\n\n  /**\n  * Approves the specified amount of tokens for the corresponding market contract.\n  * You need to approve the tokens before you can deposit or place an order.\n  *\n  * @param {ApproveSpotParams} params - The parameters for approving tokens.\n  * @return {Promise<ContractTransactionResponse>} A Promise that resolves to the transaction response.\n  */\n  async approveTokens(params: ApproveSpotParams): Promise<ContractTransactionResponse> {\n    const marketContract = await this.getSpotMarketContract(params);\n\n    return marketContract.approveTokens(params);\n  }\n\n  /**\n  * Wraps the specified amount of native tokens.\n  * You need to wrap the tokens before you can deposit.\n  *\n  * @param {WrapNativeTokenSpotParams} params - The parameters for wrapping tokens.\n  * @return {Promise<ContractTransactionResponse>} A Promise that resolves to the transaction response.\n  */\n  async wrapNativeTokens(params: WrapNativeTokenSpotParams): Promise<ContractTransactionResponse> {\n    const marketContract = await this.getSpotMarketContract(params);\n\n    return marketContract.wrapNativeToken(params);\n  }\n\n  /**\n  * Unwraps the specified amount of native tokens.\n  * You need to unwrap the tokens after withdrawal to get native tokens.\n  *\n  * @param {UnwrapNativeTokenSpotParams} params - The parameters for unwrapping tokens.\n  * @return {Promise<ContractTransactionResponse>} A Promise that resolves to the transaction response.\n  */\n  async unwrapNativeTokens(params: UnwrapNativeTokenSpotParams): Promise<ContractTransactionResponse> {\n    const marketContract = await this.getSpotMarketContract(params);\n\n    return marketContract.unwrapNativeToken(params);\n  }\n\n  /**\n  * Deposits the specified amount of tokens to the corresponding market contract.\n  * You need to approve the tokens before you can deposit them.\n  * Use the {@link OnchainLobSpot#approveTokens} method for that.\n  *\n  * @param {DepositSpotParams} params - The parameters for depositing tokens.\n  * @return {Promise<ContractTransactionResponse>} A Promise that resolves to the transaction response.\n  */\n  async depositTokens(params: DepositSpotParams): Promise<ContractTransactionResponse> {\n    const marketContract = await this.getSpotMarketContract(params);\n\n    return marketContract.depositTokens(params);\n  }\n\n  /**\n   * Withdraws the specified amount of tokens from the corresponding market contract.\n   * If withdrawAll is true, the entire balance of tokens will be withdrawn.\n   *\n   * @param {WithdrawSpotParams} params - The parameters for withdrawing tokens.\n   * @return {Promise<ContractTransactionResponse>} A Promise that resolves to the transaction response.\n   */\n  async withdrawTokens(params: WithdrawSpotParams): Promise<ContractTransactionResponse> {\n    const marketContract = await this.getSpotMarketContract(params);\n\n    return marketContract.withdrawTokens(params);\n  }\n\n  /**\n   * Sets the claimable status for corresponding market contract.\n   *\n   * @param {SetClaimableStatusParams} params - The parameters for setting the claimable status.\n   * @return {Promise<ContractTransactionResponse>} A Promise that resolves to the transaction response.\n   */\n  async setClaimableStatus(params: SetClaimableStatusParams): Promise<ContractTransactionResponse> {\n    const marketContract = await this.getSpotMarketContract(params);\n\n    return marketContract.setClaimableStatus(params);\n  }\n\n  /**\n   * Places a new order in the corresponding market contract.\n   *\n   * @param {PlaceOrderSpotParams} params - The parameters for placing a new order.\n   * @return {Promise<ContractTransactionResponse>} A Promise that resolves to the transaction response.\n   */\n  async placeOrder(params: PlaceOrderSpotParams): Promise<ContractTransactionResponse> {\n    const marketContract = await this.getSpotMarketContract(params);\n\n    return marketContract.placeOrder(params);\n  }\n\n  /**\n   * Places a new order with a permit in the corresponding market contract.\n   *\n   * @param {PlaceOrderWithPermitSpotParams} params - The parameters for placing a new order with a permit.\n   * @return {Promise<ContractTransactionResponse>} A Promise that resolves to the transaction response.\n   */\n  async placeOrderWithPermit(params: PlaceOrderWithPermitSpotParams): Promise<ContractTransactionResponse> {\n    const marketContract = await this.getSpotMarketContract(params);\n\n    return marketContract.placeOrderWithPermit(params);\n  }\n\n  /**\n   * Places a market order with a quote token value in the corresponding market contract.\n   *\n   * @param {PlaceMarketOrderWithTargetValueParams} params - The parameters for placing a market order with a target value.\n   * @return {Promise<ContractTransactionResponse>} A Promise that resolves to the transaction response.\n   */\n  async placeMarketOrderWithTargetValue(params: PlaceMarketOrderWithTargetValueParams): Promise<ContractTransactionResponse> {\n    const marketContract = await this.getSpotMarketContract(params);\n\n    return marketContract.placeMarketOrderWithTargetValue(params);\n  }\n\n  /**\n   * Places a market order with a quote token value and a permit in the corresponding market contract.\n   *\n   * @param {PlaceMarketOrderWithTargetValueWithPermitParams} params - The parameters for placing a market order with a target value and a permit.\n   * @return {Promise<ContractTransactionResponse>} A Promise that resolves to the transaction response.\n   */\n  async placeMarketOrderWithTargetValueWithPermit(params: PlaceMarketOrderWithTargetValueWithPermitParams): Promise<ContractTransactionResponse> {\n    const marketContract = await this.getSpotMarketContract(params);\n\n    return marketContract.placeMarketOrderWithTargetValueWithPermit(params);\n  }\n\n  /**\n   * Places multiple orders in the corresponding market contract.\n   *\n   * @param {BatchPlaceOrderSpotParams} params - The parameters for placing multiple orders.\n   * @return {Promise<ContractTransactionResponse>} A Promise that resolves to the transaction response.\n   */\n  async batchPlaceOrder(params: BatchPlaceOrderSpotParams): Promise<ContractTransactionResponse> {\n    const marketContract = await this.getSpotMarketContract(params);\n\n    return marketContract.batchPlaceOrder(params);\n  }\n\n  /**\n   * Claims an order or fully cancel it in the corresponding market contract.\n   *\n   * @param {ClaimOrderSpotParams} params - The parameters for claiming an order.\n   * @return {Promise<ContractTransactionResponse>} A Promise that resolves to the transaction response.\n   */\n  async claimOrder(params: ClaimOrderSpotParams): Promise<ContractTransactionResponse> {\n    const marketContract = await this.getSpotMarketContract(params);\n\n    return marketContract.claimOrder(params);\n  }\n\n  /**\n   * Claims multiple orders or fully cancels them in the corresponding market contract.\n   *\n   * @param {BatchClaimOrderSpotParams} params - The parameters for claiming multiple orders.\n   * @return {Promise<ContractTransactionResponse>} A Promise that resolves to the transaction response.\n   */\n  async batchClaim(params: BatchClaimOrderSpotParams): Promise<ContractTransactionResponse> {\n    const marketContract = await this.getSpotMarketContract(params);\n\n    return marketContract.batchClaim(params);\n  }\n\n  /**\n   * Change an existing order in the corresponding market contract.\n   *\n   * @param {ChangeOrderSpotParams} params - The parameters for changing an existing order.\n   * @return {Promise<ContractTransactionResponse>} A Promise that resolves to the transaction response.\n   */\n  async changeOrder(params: ChangeOrderSpotParams): Promise<ContractTransactionResponse> {\n    const marketContract = await this.getSpotMarketContract(params);\n\n    return marketContract.changeOrder(params);\n  }\n\n  /**\n   * Change multiple existing orders in the corresponding market contract.\n   *\n   * @param {BatchChangeOrderSpotParams} params - The parameters for changing multiple existing orders.\n   * @return {Promise<ContractTransactionResponse>} A Promise that resolves to the transaction response.\n   */\n  async batchChangeOrder(params: BatchChangeOrderSpotParams): Promise<ContractTransactionResponse> {\n    const marketContract = await this.getSpotMarketContract(params);\n\n    return marketContract.batchChangeOrder(params);\n  }\n\n  /**\n   * Retrieves the markets information from cache.\n   *\n   * @returns {Promise<Map<string, Market> | undefined>} A Promise that resolves to the markets information or undefined if error when requesting markets.\n   */\n  async getCachedMarkets(): Promise<Map<string, Market> | undefined> {\n    const markets = this.cachedMarkets;\n\n    if (!markets.size) {\n      try {\n        let getMarketsPromise = this.cachedMarketsPromise;\n        if (!getMarketsPromise) {\n          getMarketsPromise = this.getMarkets({ market: ALL_MARKETS_ID });\n          this.cachedMarketsPromise = getMarketsPromise;\n        }\n\n        const marketsRes = await getMarketsPromise;\n        this.cachedMarketsPromise = undefined;\n        marketsRes.forEach(market => markets.set(market.id, market));\n      }\n      catch (error) {\n        console.error(error);\n      }\n\n      if (!markets.size) return undefined;\n    }\n\n    return markets;\n  }\n\n  /**\n   * Retrieves the market information for the specified market.\n   *\n   * @param {GetMarketParams} params - The parameters for retrieving the market information.\n   * @returns {Promise<Market | undefined>} A Promise that resolves to the market information or undefined if the market is not found.\n   */\n  async getMarket(params: GetMarketParams): Promise<Market | undefined> {\n    const markets = await this.getMarkets(params);\n    const market = markets[0];\n\n    return market;\n  }\n\n  /**\n   * Retrieves the markets.\n   *\n   * @param {GetMarketsParams} params - The parameters for retrieving the markets.\n   * @returns {Promise<Market[]>} A Promise that resolves to an array of markets.\n   */\n  async getMarkets(params: GetMarketsParams): Promise<Market[]> {\n    const marketDtos = await this.onchainLobService.getMarkets(params);\n    const markets = marketDtos.map(marketDto => this.mappers.mapMarketDtoToMarket(\n      marketDto,\n      marketDto.priceScalingFactor,\n      marketDto.tokenXScalingFactor\n    ));\n\n    return markets;\n  }\n\n  /**\n   * Retrieves the tokens.\n   *\n   * @param {GetTokensParams} params - The parameters for retrieving the tokens.\n   * @returns {Promise<Token[]>} A Promise that resolves to an array of tokens.\n   */\n  async getTokens(params: GetTokensParams): Promise<Token[]> {\n    const tokenDtos = await this.onchainLobService.getTokens(params);\n    const tokens = tokenDtos.map(this.mappers.mapTokenDtoToToken);\n\n    return tokens;\n  }\n\n  /**\n   * Retrieves the orderbook for the specified market.\n   *\n   * @param {GetOrderbookParams} params - The parameters for retrieving the orderbook.\n   * @returns {Promise<Orderbook>} A Promise that resolves to the orderbook.\n   */\n  async getOrderbook(params: GetOrderbookParams): Promise<Orderbook> {\n    const [market, orderbookDto] = await Promise.all([\n      this.ensureMarket(params),\n      this.onchainLobService.getOrderbook(params),\n    ]);\n    const orderbook = this.mappers.mapOrderbookDtoToOrderbook(orderbookDto, market.priceScalingFactor, market.tokenXScalingFactor);\n\n    return orderbook;\n  }\n\n  /**\n   * Retrieves the orders for the specified market.\n   *\n   * @param {GetOrdersParams} params - The parameters for retrieving the orders.\n   * @returns {Promise<Order[]>} A Promise that resolves to an array of orders.\n   */\n  async getOrders(params: GetOrdersParams): Promise<Order[]> {\n    const [market, orderDtos] = await Promise.all([\n      this.ensureMarket(params),\n      this.onchainLobService.getOrders(params),\n    ]);\n    const orders = orderDtos.map(orderDto => this.mappers.mapOrderDtoToOrder(orderDto, market.priceScalingFactor, market.tokenXScalingFactor));\n\n    return orders;\n  }\n\n  /**\n   * Retrieves the order history for the specified market.\n   *\n   * @param {GetOrderHistoryParams} params - The parameters for retrieving the order history.\n   * @returns {Promise<OrderHistory[]>} A Promise that resolves to an array of order history logs.\n   */\n  async getOrderHistory(params: GetOrderHistoryParams): Promise<OrderHistory[]> {\n    const [market, orderHistoryDtos] = await Promise.all([\n      this.ensureMarket(params),\n      this.onchainLobService.getOrderHistory(params),\n    ]);\n    const orderHistory = orderHistoryDtos.map(orderHistoryDto => this.mappers.mapOrderHistoryDtoToOrderHistory(orderHistoryDto, market.priceScalingFactor, market.tokenXScalingFactor, market.tokenYScalingFactor));\n\n    return orderHistory;\n  }\n\n  /**\n   * Retrieves the trades for the specified market.\n   *\n   * @param {GetTradesParams} params - The parameters for retrieving the trades.\n   * @returns {Promise<Trade[]>} A Promise that resolves to an array of trades.\n   */\n  async getTrades(params: GetTradesParams): Promise<Trade[]> {\n    const [market, tradeDtos] = await Promise.all([\n      this.ensureMarket(params),\n      this.onchainLobService.getTrades(params),\n    ]);\n    const trades = tradeDtos.map(tradeDto => this.mappers.mapTradeDtoToTrade(tradeDto, market.priceScalingFactor, market.tokenXScalingFactor));\n\n    return trades;\n  }\n\n  /**\n   * Retrieves the fills for the specified market.\n   *\n   * @param {GetFillsParams} params - The parameters for retrieving the fills.\n   * @returns {Promise<Fill[]>} A Promise that resolves to an array of fills.\n   */\n  async getFills(params: GetFillsParams): Promise<Fill[]> {\n    const [market, fillDtos] = await Promise.all([\n      this.ensureMarket(params),\n      this.onchainLobService.getFills(params),\n    ]);\n    const fills = fillDtos.map(fillDto => this.mappers.mapFillDtoToFill(fillDto, market.priceScalingFactor, market.tokenXScalingFactor, market.tokenYScalingFactor));\n\n    return fills;\n  }\n\n  /**\n   * Retrieves the candles for the specified market and resolution.\n   *\n   * @param {GetCandlesParams} params - The parameters for retrieving the candles.\n   * @returns {Promise<Candle[]>} A Promise that resolves to an array of candles.\n   */\n  async getCandles(params: GetCandlesParams): Promise<Candle[]> {\n    const candles = await this.onchainLobService.getCandles(params);\n\n    return candles;\n  }\n\n  /**\n   * Calculates the limit order details for a given token inputs.\n   *\n   * @param {CalculateLimitDetailsParams} params - The parameters for the limit details calculation.\n   * @returns {Promise<LimitOrderDetails>} A Promise that resolves to the limit order details data.\n   */\n  async calculateLimitDetails(params: CalculateLimitDetailsParams): Promise<LimitOrderDetails> {\n    return this.onchainLobService.calculateLimitDetails(params);\n  }\n\n  /**\n   * Calculates the limit order details for a given token inputs without API request.\n   *\n   * @param {CalculateLimitDetailsSyncParams} params - The parameters for the limit details calculation.\n   * @returns {LimitOrderDetails} Limit order details data.\n   */\n  calculateLimitDetailsSync(params: CalculateLimitDetailsSyncParams): LimitOrderDetails {\n    return getLimitDetails(params);\n  }\n\n  /**\n   * Calculates the market order details for a given token inputs.\n   *\n   * @param {CalculateMarketDetailsParams} params - The parameters for the market details calculation.\n   * @returns {Promise<MarketOrderDetails>} A Promise that resolves to the market order details data.\n   */\n  async calculateMarketDetails(params: CalculateMarketDetailsParams): Promise<MarketOrderDetails> {\n    return this.onchainLobService.calculateMarketDetails(params);\n  }\n\n  /**\n   * Calculates the market order details for a given token inputs without API request.\n   *\n   * @param {CalculateMarketDetailsSyncParams} params - The parameters for the market details calculation.\n   * @returns {MarketOrderDetails} Market order details data.\n   */\n  calculateMarketDetailsSync(params: CalculateMarketDetailsSyncParams): MarketOrderDetails {\n    return getMarketDetails(params);\n  }\n\n  /**\n   * Retrieves the user balances for the specified user.\n   *\n   * @param {GetUserBalancesParams} params - The parameters for retrieving the user balances.\n   * @returns {Promise<UserBalances>} A Promise that resolves to the user balances data.\n   */\n  async getUserBalances(params: GetUserBalancesParams): Promise<UserBalances> {\n    return this.onchainLobService.getUserBalances(params);\n  }\n\n  /**\n   * Retrieves the deposits for the specified user.\n   *\n   * @param {GetUserDepositsParams} params - The parameters for retrieving the user deposits.\n   * @returns {Promise<UserDeposits>} A Promise that resolves to the user deposits data.\n   */\n  async getUserDeposits(params: GetUserDepositsParams): Promise<UserDeposits> {\n    return this.onchainLobService.getUserDeposits(params);\n  }\n\n  /**\n   * Subscribes to the market updates for the specified market.\n   *\n   * @param {SubscribeToMarketParams} params - The parameters for subscribing to the market updates.\n   * @emits OnchainLobSpot#events#marketUpdated\n   */\n  subscribeToMarket(params: SubscribeToMarketParams): void {\n    this.onchainLobWebSocketService.subscribeToMarket(params);\n  }\n\n  /**\n   * Unsubscribes from the market updates for the specified market.\n   *\n   * @param {UnsubscribeFromMarketParams} params - The parameters for unsubscribing from the market updates.\n   */\n  unsubscribeFromMarket(params: UnsubscribeFromMarketParams): void {\n    this.onchainLobWebSocketService.unsubscribeFromMarket(params);\n  }\n\n  /**\n   * Subscribes to the all markets updates.\n   *\n   * @emits OnchainLobSpot#events#marketUpdated\n   */\n  subscribeToAllMarkets(): void {\n    this.onchainLobWebSocketService.subscribeToAllMarkets();\n  }\n\n  /**\n   * Unsubscribes from the all markets updates.\n   */\n  unsubscribeFromAllMarkets(): void {\n    this.onchainLobWebSocketService.unsubscribeFromAllMarkets();\n  }\n\n  /**\n   * Subscribes to the orderbook updates for the specified market and aggregation level.\n   *\n   * @param {SubscribeToOrderbookParams} params - The parameters for subscribing to the orderbook updates.\n   * @emits OnchainLobSpot#events#orderbookUpdated\n   */\n  subscribeToOrderbook(params: SubscribeToOrderbookParams): void {\n    this.onchainLobWebSocketService.subscribeToOrderbook(params);\n  }\n\n  /**\n   * Unsubscribes from the orderbook updates for the specified market and aggregation level.\n   *\n   * @param {UnsubscribeFromOrderbookParams} params - The parameters for unsubscribing from the orderbook updates.\n   */\n  unsubscribeFromOrderbook(params: UnsubscribeFromOrderbookParams): void {\n    this.onchainLobWebSocketService.unsubscribeFromOrderbook(params);\n  }\n\n  /**\n   * Subscribes to the trade updates for the specified market.\n   *\n   * @param {SubscribeToTradesParams} params - The parameters for subscribing to the trade updates.\n   * @emits OnchainLobSpot#events#tradesUpdated\n   */\n  subscribeToTrades(params: SubscribeToTradesParams): void {\n    this.onchainLobWebSocketService.subscribeToTrades(params);\n  }\n\n  /**\n   * Unsubscribes from the trade updates for the specified market.\n   *\n   * @param {UnsubscribeFromTradesParams} params - The parameters for unsubscribing from the trade updates.\n   */\n  unsubscribeFromTrades(params: UnsubscribeFromTradesParams): void {\n    this.onchainLobWebSocketService.unsubscribeFromTrades(params);\n  }\n\n  /**\n   * Subscribes to the user orders updates for the specified market and user.\n   *\n   * @param {SubscribeToUserOrdersParams} params - The parameters for subscribing to the user orders updates.\n   * @emits OnchainLobSpot#events#ordersUpdated\n   */\n  subscribeToUserOrders(params: SubscribeToUserOrdersParams): void {\n    this.onchainLobWebSocketService.subscribeToUserOrders(params);\n  }\n\n  /**\n   * Unsubscribes from the user orders updates for the specified market and user.\n   *\n   * @param {UnsubscribeFromUserOrdersParams} params - The parameters for unsubscribing from the user orders updates.\n   * @emits OnchainLobSpot#events#ordersUpdated\n   */\n  unsubscribeFromUserOrders(params: UnsubscribeFromUserOrdersParams): void {\n    this.onchainLobWebSocketService.unsubscribeFromUserOrders(params);\n  }\n\n  /**\n   * Subscribes to the user order history updates for the specified market and user.\n   *\n   * @param {SubscribeToUserOrderHistoryParams} params - The parameters for subscribing to the user order history updates.\n   * @emits OnchainLobSpot#events#userOrderHistoryUpdated\n   */\n  subscribeToUserOrderHistory(params: SubscribeToUserOrderHistoryParams): void {\n    this.onchainLobWebSocketService.subscribeToUserOrderHistory(params);\n  }\n\n  /**\n     * Unsubscribes from the user order updates for the specified market and user.\n     *\n     * @param {UnsubscribeFromUserOrderHistoryParams} params - The parameters for unsubscribing from the user orders updates.\n     * @emits OnchainLobSpot#events#userOrderHistoryUpdated\n     */\n  unsubscribeFromUserOrderHistory(params: UnsubscribeFromUserOrderHistoryParams): void {\n    this.onchainLobWebSocketService.unsubscribeFromUserOrderHistory(params);\n  }\n\n  /**\n   * Subscribes to the user fills updates for the specified market and user.\n   *\n   * @param {SubscribeToUserFillsParams} params - The parameters for subscribing to the user fills updates.\n   * @emits OnchainLobSpot#events#userFillsUpdated\n   */\n  subscribeToUserFills(params: SubscribeToUserFillsParams): void {\n    this.onchainLobWebSocketService.subscribeToUserFills(params);\n  }\n\n  /**\n   * Unsubscribes from the user fills updates for the specified market and user.\n   *\n   * @param {UnsubscribeFromUserFillsParams} params - The parameters for unsubscribing from the user fills updates.\n   * @emits OnchainLobSpot#events#userFillsUpdated\n   */\n  unsubscribeFromUserFills(params: UnsubscribeFromUserFillsParams): void {\n    this.onchainLobWebSocketService.unsubscribeFromUserFills(params);\n  }\n\n  /**\n   * Subscribes to candle updates for the specified market and resolution.\n   *\n   * @param {SubscribeToCandlesParams} params - The parameters for subscribing to the candle updates.\n   */\n  subscribeToCandles(params: SubscribeToCandlesParams): void {\n    this.onchainLobWebSocketService.subscribeToCandles(params);\n  }\n\n  /**\n   * Unsubscribes from candle updates for the specified market and resolution.\n   *\n   * @param {UnsubscribeFromCandlesParams} params - The parameters for unsubscribing from the candle updates.\n   */\n  unsubscribeFromCandles(params: UnsubscribeFromCandlesParams): void {\n    this.onchainLobWebSocketService.unsubscribeFromCandles(params);\n  }\n\n  [Symbol.dispose](): void {\n    this.detachEvents();\n    this.onchainLobWebSocketService[Symbol.dispose]();\n  }\n\n  protected async ensureMarket(params: { market: string }): Promise<Market> {\n    const markets = await this.getCachedMarkets();\n    const market = markets?.get(params.market);\n    if (!market)\n      throw new Error(`Market not found by the ${params.market} address`);\n\n    return market;\n  }\n\n  protected async getSpotMarketContract(params: { market: string }): Promise<OnchainLobSpotMarketContract> {\n    if (this.signer === null) {\n      throw new Error('Signer is not set');\n    }\n    let marketContract = this.marketContracts.get(params.market);\n\n    if (!marketContract) {\n      const market = await this.ensureMarket(params);\n\n      marketContract = new OnchainLobSpotMarketContract({\n        market,\n        signer: this.signer,\n        transferExecutedTokensEnabled: this.transferExecutedTokensEnabled,\n        autoWaitTransaction: this.autoWaitTransaction,\n      });\n      this.marketContracts.set(params.market, marketContract);\n    }\n\n    return marketContract;\n  }\n\n  protected attachEvents(): void {\n    this.onchainLobWebSocketService.events.marketUpdated.addListener(this.onMarketUpdated);\n    this.onchainLobWebSocketService.events.allMarketsUpdated.addListener(this.onAllMarketsUpdated);\n    this.onchainLobWebSocketService.events.orderbookUpdated.addListener(this.onOrderbookUpdated);\n    this.onchainLobWebSocketService.events.tradesUpdated.addListener(this.onTradesUpdated);\n    this.onchainLobWebSocketService.events.userOrdersUpdated.addListener(this.onUserOrdersUpdated);\n    this.onchainLobWebSocketService.events.userOrderHistoryUpdated.addListener(this.onUserOrderHistoryUpdated);\n    this.onchainLobWebSocketService.events.userFillsUpdated.addListener(this.onUserFillsUpdated);\n    this.onchainLobWebSocketService.events.candlesUpdated.addListener(this.onCandlesUpdated);\n    this.onchainLobWebSocketService.events.subscriptionError.addListener(this.onSubscriptionError);\n  }\n\n  protected detachEvents(): void {\n    this.onchainLobWebSocketService.events.marketUpdated.removeListener(this.onMarketUpdated);\n    this.onchainLobWebSocketService.events.orderbookUpdated.removeListener(this.onOrderbookUpdated);\n    this.onchainLobWebSocketService.events.tradesUpdated.removeListener(this.onTradesUpdated);\n    this.onchainLobWebSocketService.events.userOrdersUpdated.removeListener(this.onUserOrdersUpdated);\n    this.onchainLobWebSocketService.events.userOrderHistoryUpdated.removeListener(this.onUserOrderHistoryUpdated);\n    this.onchainLobWebSocketService.events.userFillsUpdated.removeListener(this.onUserFillsUpdated);\n    this.onchainLobWebSocketService.events.candlesUpdated.removeListener(this.onCandlesUpdated);\n    this.onchainLobWebSocketService.events.subscriptionError.removeListener(this.onSubscriptionError);\n  }\n\n  protected onMarketUpdated: Parameters<typeof this.onchainLobWebSocketService.events.marketUpdated['addListener']>[0] = async (marketId, isSnapshot, data) => {\n    try {\n      const marketUpdate = this.mappers.mapMarketUpdateDtoToMarketUpdate(marketId, data, data.priceScalingFactor, data.tokenXScalingFactor);\n\n      (this.events.marketUpdated as ToEventEmitter<typeof this.events.marketUpdated>).emit(marketId, isSnapshot, marketUpdate);\n    }\n    catch (error) {\n      console.error(getErrorLogMessage(error));\n    }\n  };\n\n  protected onAllMarketsUpdated: Parameters<typeof this.onchainLobWebSocketService.events.allMarketsUpdated['addListener']>[0] = async (isSnapshot, data) => {\n    try {\n      const allMarketsUpdate = data.map(marketUpdateDot =>\n        this.mappers.mapMarketUpdateDtoToMarketUpdate(marketUpdateDot.id, marketUpdateDot, marketUpdateDot.priceScalingFactor, marketUpdateDot.tokenXScalingFactor));\n\n      (this.events.allMarketUpdated as ToEventEmitter<typeof this.events.allMarketUpdated>).emit(isSnapshot, allMarketsUpdate);\n    }\n    catch (error) {\n      console.error(getErrorLogMessage(error));\n    }\n  };\n\n  protected onOrderbookUpdated: Parameters<typeof this.onchainLobWebSocketService.events.orderbookUpdated['addListener']>[0] = async (marketId, isSnapshot, data) => {\n    try {\n      const markets = await this.getCachedMarkets();\n      const market = markets?.get(marketId);\n      if (!market)\n        return;\n      const orderbookUpdate = this.mappers.mapOrderbookUpdateDtoToOrderbookUpdate(marketId, data, market.priceScalingFactor, market.tokenXScalingFactor);\n\n      (this.events.orderbookUpdated as ToEventEmitter<typeof this.events.orderbookUpdated>).emit(marketId, isSnapshot, orderbookUpdate);\n    }\n    catch (error) {\n      console.error(getErrorLogMessage(error));\n    }\n  };\n\n  protected onTradesUpdated: Parameters<typeof this.onchainLobWebSocketService.events.tradesUpdated['addListener']>[0] = async (marketId, isSnapshot, data) => {\n    try {\n      const markets = await this.getCachedMarkets();\n      if (!markets)\n        return;\n      const tradeUpdates = data.map(dto => {\n        const market = markets.get(dto.market.id);\n        if (!market)\n          throw new Error(`Market not found for marketId: ${dto.market.id}`);\n        return this.mappers.mapTradeUpdateDtoToTradeUpdate(marketId, dto, market.priceScalingFactor, market.tokenXScalingFactor);\n      });\n\n      (this.events.tradesUpdated as ToEventEmitter<typeof this.events.tradesUpdated>).emit(marketId, isSnapshot, tradeUpdates);\n    }\n    catch (error) {\n      console.error(getErrorLogMessage(error));\n    }\n  };\n\n  protected onUserOrdersUpdated: Parameters<typeof this.onchainLobWebSocketService.events.userOrdersUpdated['addListener']>[0] = async (marketId, isSnapshot, data) => {\n    try {\n      const markets = await this.getCachedMarkets();\n      if (!markets)\n        return;\n      const orderUpdates = data.map(dto => {\n        const market = markets.get(dto.market.id);\n        if (!market)\n          throw new Error(`Market not found for marketId: ${dto.market.id}`);\n        return this.mappers.mapOrderUpdateDtoToOrderUpdate(marketId, dto, market.priceScalingFactor, market.tokenXScalingFactor);\n      });\n\n      (this.events.userOrdersUpdated as ToEventEmitter<typeof this.events.userOrdersUpdated>).emit(marketId, isSnapshot, orderUpdates);\n    }\n    catch (error) {\n      console.error(getErrorLogMessage(error));\n    }\n  };\n\n  protected onUserOrderHistoryUpdated: Parameters<typeof this.onchainLobWebSocketService.events.userOrderHistoryUpdated['addListener']>[0] = async (marketId, isSnapshot, data) => {\n    try {\n      const markets = await this.getCachedMarkets();\n      if (!markets)\n        return;\n      const orderHistoryUpdates = data.map(dto => {\n        const market = markets.get(dto.market.id);\n        if (!market)\n          throw new Error(`Market not found for marketId: ${dto.market.id}`);\n        return this.mappers.mapOrderHistoryUpdateDtoToOrderHistoryUpdate(marketId, dto, market.priceScalingFactor, market.tokenXScalingFactor, market.tokenYScalingFactor);\n      });\n\n      (this.events.userOrderHistoryUpdated as ToEventEmitter<typeof this.events.userOrderHistoryUpdated>).emit(marketId, isSnapshot, orderHistoryUpdates);\n    }\n    catch (error) {\n      console.error(getErrorLogMessage(error));\n    }\n  };\n\n  protected onUserFillsUpdated: Parameters<typeof this.onchainLobWebSocketService.events.userFillsUpdated['addListener']>[0] = async (marketId, isSnapshot, data) => {\n    try {\n      const markets = await this.getCachedMarkets();\n      if (!markets)\n        return;\n      const fillUpdates = data.map(dto => {\n        const market = markets.get(dto.market.id);\n        if (!market)\n          throw new Error(`Market not found for marketId: ${dto.market.id}`);\n        return this.mappers.mapFillUpdateDtoToFillUpdate(marketId, dto, market.priceScalingFactor, market.tokenXScalingFactor, market.tokenYScalingFactor);\n      });\n\n      (this.events.userFillsUpdated as ToEventEmitter<typeof this.events.userFillsUpdated>).emit(marketId, isSnapshot, fillUpdates);\n    }\n    catch (error) {\n      console.error(getErrorLogMessage(error));\n    }\n  };\n\n  protected onCandlesUpdated: Parameters<typeof this.onchainLobWebSocketService.events.candlesUpdated['addListener']>[0] = (marketId, isSnapshot, data) => {\n    (this.events.candlesUpdated as ToEventEmitter<typeof this.events.candlesUpdated>).emit(marketId, isSnapshot, data);\n  };\n\n  protected onSubscriptionError: Parameters<typeof this.onchainLobWebSocketService.events.subscriptionError['addListener']>[0] = error => {\n    (this.events.subscriptionError as ToEventEmitter<typeof this.events.subscriptionError>).emit(error);\n  };\n}\n", "import BigNumber from 'bignumber.js';\nimport { VaultInfo } from '../models';\nimport { EventEmitter } from '../common';\nimport { CalculateDepositDetailsSyncParams, CalculateWithdrawDetailsSyncParams, DepositDetails, DepositParams, SubscribeToVaultUpdatesParams, SubscribeToVaultValueHistoryParams, WithdrawDetails, WithdrawParams } from './params';\nimport { VaultUpdate, VaultValueHistoryUpdate } from '../models';\n\nexport class MockVault {\n  subscribeParams: SubscribeToVaultUpdatesParams | undefined;\n\n  constructor() {\n    this.subscribeParams = undefined;\n    setInterval(() => {\n      if (this.subscribeParams) {\n        this.emitRandomVault();\n      }\n    }, 7000);\n    setInterval(() => {\n      if (this.subscribeParams) {\n        this.emitRandomHistory();\n      }\n    }, 8340);\n  }\n\n  private emitRandomVault(): void {\n    this.events.vaultUpdated.emit([{\n      totalAmount: BigInt(Math.floor(Math.random() * 100000)),\n      totalUSDValue: Math.random() * 100000,\n      pastWeekReturn: Math.random() * 100,\n      userUSDValue: this.subscribeParams?.user ? Math.random() * 10000 : undefined,\n      userAllTimeEarnedUSDValue: this.subscribeParams?.user ? Math.random() * 5000 : undefined,\n      leader: '0x4562393292392393293923',\n      vaultPerfomance: {\n        pnlPerfomance: Math.random() * 10000,\n        maxDrowdownPercentage: Math.random() * 100,\n        volume: Math.random() * 1000000,\n        profitShare: Math.random() * 100,\n      },\n    }]);\n  }\n\n  private emitRandomHistory(): void {\n    this.events.vaultValueHistoryUpdated.emit([{\n      pnl: Math.random() * 10000,\n      totalUSDValue: Math.random() * 100000,\n      time: Date.now(),\n      lastTouched: Date.now(),\n    }]);\n  }\n\n  private emitHistory(): void {\n    const timestamps = [1735765200, 1735851600, 1735938000, 1736024400, 1736110800];\n    const history = timestamps.map(timestamp => ({\n      pnl: Math.random() * 10000,\n      totalUSDValue: Math.random() * 100000,\n      time: timestamp,\n      lastTouched: timestamp,\n    }));\n    this.events.vaultValueHistoryUpdated.emit(history);\n  }\n\n  events = {\n    vaultUpdated: new EventEmitter<[data: VaultUpdate[]]>(),\n    vaultValueHistoryUpdated: new EventEmitter<[data: VaultValueHistoryUpdate[]]>(),\n    subscriptionError: new EventEmitter<[error: string]>(),\n  };\n\n  subscribeToVaultUpdates(params: SubscribeToVaultUpdatesParams): void {\n    this.subscribeParams = params;\n  }\n\n  unsubscribeFromVaultUpdates(): void {\n    this.subscribeParams = undefined;\n  }\n\n  subscribeToVaultValueHistory(_params: SubscribeToVaultValueHistoryParams): void {\n    setTimeout(() => {\n      this.emitHistory();\n    }, 1500);\n  }\n\n  unsubscribeFromVaultValueHistory(): void {\n    this.subscribeParams = undefined;\n  }\n\n  calculateDepositDetailsSync(params: CalculateDepositDetailsSyncParams): DepositDetails {\n    return {\n      estTokenReceive: new BigNumber(Math.random() * 1000),\n      estFee: new BigNumber(Math.random() * 10),\n    } as DepositDetails;\n  }\n\n  calculateWithdrawDetailsSync(params: CalculateWithdrawDetailsSyncParams): WithdrawDetails {\n    return {\n      estTokenReceive: new BigNumber(Math.random() * 1000),\n      estFee: new BigNumber(Math.random() * 10),\n    } as WithdrawDetails;\n  }\n\n  deposit(params: DepositParams): void {\n    setTimeout(() => {\n      this.emitRandomVault();\n      this.emitRandomHistory();\n    }, 1000);\n  }\n\n  withdraw(params: WithdrawParams): void {\n    setTimeout(() => {\n      this.emitRandomVault();\n      this.emitRandomHistory();\n    }, 1000);\n  }\n\n  async vaultInfo(): Promise<VaultInfo> {\n    return {\n      vaultAddress: '0x123123123123123123123123',\n      tokens: [\n        {\n          id: '0x50c42deacd8fc9773493ed674b675be577f2634b',\n          name: 'Ether',\n          symbol: 'ETH',\n          contractAddress: '0x50c42deacd8fc9773493ed674b675be577f2634b',\n          decimals: 18,\n          roundingDecimals: 6,\n          supportsPermit: false,\n          iconUrl: null,\n          fromOg: false,\n        },\n        {\n          id: '0x29219dd400f2bf60e5a23d13be72b486d4038894',\n          name: 'USD Coin',\n          symbol: 'USDC',\n          contractAddress: '0x29219dd400f2bf60e5a23d13be72b486d4038894',\n          decimals: 6,\n          roundingDecimals: 6,\n          supportsPermit: false,\n          iconUrl: null,\n          fromOg: false,\n        },\n        {\n          id: 's',\n          name: 'Sonic',\n          symbol: 'S',\n          contractAddress: '0x039e2fb66102314ce7b64ce5ce3e5183bc94ad38',\n          decimals: 18,\n          roundingDecimals: 6,\n          supportsPermit: false,\n          iconUrl: null,\n          fromOg: false,\n        },\n      ],\n    } as VaultInfo;\n  }\n}\n", "import { Signer } from 'ethers/providers';\nimport { EventEmitter, type PublicEventEmitter, type ToEventEmitter } from '../common';\nimport type { VaultInfo, VaultUpdate, VaultValueHistoryUpdate } from '../models';\nimport { OnchainLobSpotService, OnchainLobSpotWebSocketService } from '../services';\nimport { MockVault } from './mock';\nimport { CalculateDepositDetailsSyncParams, CalculateWithdrawDetailsSyncParams, DepositDetails, DepositParams, SubscribeToVaultUpdatesParams, SubscribeToVaultValueHistoryParams, WithdrawDetails, WithdrawParams } from './params';\n\n/**\n * Options for configuring the OnchainLobVault instance.\n *\n * @interface OnchainLobVaultOptions\n */\nexport interface OnchainLobVaultOptions {\n  /**\n   * The base URL for the Onchain LOB Vault API.\n   *\n   * @type {string}\n   */\n  apiBaseUrl: string;\n\n  /**\n   * The base URL for the Onchain LOB WebSocket API.\n   *\n   * @type {string}\n   */\n  webSocketApiBaseUrl: string;\n}\n\n/**\n * Events are emitted when data related to subscriptions is updated.\n */\ninterface OnchainLobVaultEvents {\n  /**\n   * Emitted when a vault value changes, e.g. any user deposits in the vault or token prices are updated.\n   * @event\n   * @type {PublicEventEmitter<readonly [data: VaultUpdate[]]>}\n   */\n  vaultUpdated: PublicEventEmitter<readonly [data: VaultUpdate[]]>;\n\n  /**\n   * Emitted when a vault history value changes.\n   * @event\n   * @type {PublicEventEmitter<readonly [data: VaultHistoryUpdate[]]>;\n   */\n  vaultValueHistoryUpdated: PublicEventEmitter<readonly [data: VaultValueHistoryUpdate[]]>;\n\n  /**\n   * Emitted when there is an error related to a subscription.\n   * @event\n   * @type {PublicEventEmitter<readonly [error: string]>}\n   */\n  subscriptionError: PublicEventEmitter<readonly [error: string]>;\n}\n\n/**\n * The OnchainLobVault is a class for interacting with the Onchain LOB Vault API.\n * It provides methods for managing user deposits and handling subscription events.\n */\nexport class OnchainLobVault {\n  /**\n   * The events related to user subscriptions.\n   *\n   * These events are emitted when data is updated related to subscriptions.\n   */\n  readonly events: OnchainLobVaultEvents = {\n    vaultUpdated: new EventEmitter(),\n    vaultValueHistoryUpdated: new EventEmitter(),\n    // userVaultHistoryUpdated: new EventEmitter(),\n    // depositorsUpdated: new EventEmitter(),\n    subscriptionError: new EventEmitter(),\n  };\n\n  protected readonly onchainLobVaultService: OnchainLobSpotService;\n  protected readonly onchainLobVaultWebSocketService: OnchainLobSpotWebSocketService;\n  private mockVault: MockVault;\n\n  constructor(options: Readonly<OnchainLobVaultOptions>) {\n    this.onchainLobVaultService = new OnchainLobSpotService(options.apiBaseUrl);\n    this.onchainLobVaultWebSocketService = new OnchainLobSpotWebSocketService(options.webSocketApiBaseUrl);\n    this.mockVault = new MockVault();\n    this.attachEvents();\n  }\n\n  setSigner(signer: Signer | null): void {\n  }\n\n  /**\n   * Subscribes to the vault updates.\n   *\n   * @emits OnchainLobVault#events#vaultUpdated\n   */\n  subscribeToVaultUpdates(params: SubscribeToVaultUpdatesParams): void {\n    // this.onchainLobVaultWebSocketService.subscribeToVaultUpdates(params);\n    this.mockVault.subscribeToVaultUpdates(params);\n  }\n\n  /**\n   * Unsubscribes from the vault updates.\n   */\n  unsubscribeFromVaultUpdates(): void {\n    // this.onchainLobVaultWebSocketService.unsubscribeFromVaultUpdates();\n    this.mockVault.unsubscribeFromVaultUpdates();\n  }\n\n  subscribeToVaultValueHistory(params: SubscribeToVaultValueHistoryParams): void {\n    this.mockVault.subscribeToVaultValueHistory(params);\n  }\n\n  unsubscribeFromVaultValueHistory(): void {\n    this.mockVault.unsubscribeFromVaultValueHistory();\n  }\n\n  protected attachEvents(): void {\n    // this.onchainLobVaultWebSocketService.events.vaultUpdated.addListener(this.onVaultUpdated);\n    // this.onchainLobVaultWebSocketService.events.subscriptionError.addListener(this.onSubscriptionError);\n    this.mockVault.events.vaultUpdated.addListener(this.onVaultUpdated);\n    this.mockVault.events.vaultValueHistoryUpdated.addListener(this.onVaultValueHistoryUpdated);\n    this.mockVault.events.subscriptionError.addListener(this.onSubscriptionError);\n  }\n\n  protected onVaultUpdated: Parameters<typeof this.mockVault.events.vaultUpdated['addListener']>[0] = data => {\n    (this.events.vaultUpdated as ToEventEmitter<typeof this.events.vaultUpdated>).emit(data);\n  };\n\n  protected onVaultValueHistoryUpdated: Parameters<typeof this.mockVault.events.vaultValueHistoryUpdated['addListener']>[0] = data => {\n    (this.events.vaultValueHistoryUpdated as ToEventEmitter<typeof this.events.vaultValueHistoryUpdated>).emit(data);\n  };\n\n  protected onSubscriptionError: Parameters<typeof this.mockVault.events.subscriptionError['addListener']>[0] = error => {\n    (this.events.subscriptionError as ToEventEmitter<typeof this.events.subscriptionError>).emit(error);\n  };\n\n  calculateDepositDetailsSync(params: CalculateDepositDetailsSyncParams): DepositDetails {\n    return this.mockVault.calculateDepositDetailsSync(params);\n  }\n\n  calculateWithdrawDetailsSync(params: CalculateWithdrawDetailsSyncParams): WithdrawDetails {\n    return this.mockVault.calculateWithdrawDetailsSync(params);\n  }\n\n  async deposit(params: DepositParams): Promise<void> {\n    this.mockVault.deposit(params);\n  }\n\n  async withdraw(params: WithdrawParams): Promise<void> {\n    this.mockVault.withdraw(params);\n  }\n\n  async getVaultInfo(): Promise<VaultInfo> {\n    return this.mockVault.vaultInfo();\n  }\n}\n", "import type { Signer } from 'ethers/providers';\n\nimport { OnchainLobSpot } from './spot';\nimport { OnchainLobVault } from './vault';\n\n/**\n * The options for the OnchainLobClient.\n *\n * @interface OnchainLobClientOptions\n */\nexport interface OnchainLobClientOptions {\n  /**\n   * The base URL for the Onchain LOB API.\n   *\n   * @type {string}\n   */\n  apiBaseUrl: string;\n\n  /**\n   * The base URL for the Onchain LOB WebSocket API.\n   *\n   * @type {string}\n   */\n  webSocketApiBaseUrl: string;\n\n  /**\n   * The ethers signer used for signing transactions.\n   * For only http/ws operations, you can set this to null.\n   *\n   * @type {Signer | null}\n   */\n  signer: Signer | null;\n\n  /**\n   * Whether to connect to the WebSocket immediately after creating the OnchainLobClient (true)\n   * or when will be called the first subscription (false).\n   * By default, the WebSocket is connected immediately.\n   *\n   * @type {boolean}\n   */\n  webSocketConnectImmediately?: boolean;\n\n  /**\n   * Whether to automatically wait for transactions to be confirmed.\n   *\n   * @type {boolean}\n   * @optional\n   */\n  autoWaitTransaction?: boolean;\n\n  /**\n   * Whether to use a fast algorithm for waiting for transactions to be confirmed.\n   *\n   * @type {boolean}\n   * @optional\n   */\n  fastWaitTransaction?: boolean;\n\n  /**\n   * Interval between requests in milliseconds when using a fast algorithm for waiting for transaction confirmations.\n   *\n   * @type {number}\n   * @optional\n   */\n  fastWaitTransactionInterval?: number;\n\n  /**\n   * Timeout in milliseconds when using a fast algorithm for waiting for transaction confirmations.\n   *\n   * @type {number}\n   * @optional\n   */\n  fastWaitTransactionTimeout?: number;\n}\n\n/**\n * The client for interacting with the exchange.\n *\n * @class OnchainLobClient\n */\nexport class OnchainLobClient {\n  /**\n   * The OnchainLobSpot instance that provides the API functions to interact with the Onchain LOB Spot contracts.\n   *\n   * @type {OnchainLobSpot}\n   * @readonly\n   */\n  readonly spot: OnchainLobSpot;\n\n  /**\n   * The OnchainLobVault instance that provides the API functions to interact with the Onchain LOB Vault contract.\n   *\n   * @type {OnchainLobVault}\n   * @readonly\n   */\n  readonly vault: OnchainLobVault;\n\n  /**\n   * Creates a new OnchainLobClient instance.\n   *\n   * @param {OnchainLobClientOptions} options - The options for the OnchainLobClient.\n   */\n  constructor(options: Readonly<OnchainLobClientOptions>) {\n    this.spot = new OnchainLobSpot(options);\n    this.vault = new OnchainLobVault(options);\n  }\n\n  /**\n   * Sets the signer for the OnchainLobClient.\n   *\n   * @param {Signer | null} signer - The signer to set. For only http/ws operations, you can set this to null.\n   */\n  setSigner(signer: Signer | null): void {\n    this.spot.setSigner(signer);\n    this.vault.setSigner(signer);\n  }\n}\n"],
  "mappings": "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",
  "names": ["BigNumber", "BigNumber", "BigNumber", "BigNumber", "BigNumber", "BigNumber", "BigNumber", "BigNumber"]
}
